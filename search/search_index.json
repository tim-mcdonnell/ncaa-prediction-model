{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NCAA Basketball Analytics Project","text":"<ul> <li>NCAA Basketball Analytics Project<ul> <li>Project Overview</li> <li>Key Components</li> <li>Documentation Structure</li> <li>Getting Started</li> </ul> </li> </ul> <p>Welcome to the documentation for the NCAA Basketball Analytics Project. This project provides data processing pipelines, analytics, and prediction models for NCAA basketball games.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>The NCAA Basketball Analytics Project leverages a modern data architecture to collect, process, and analyze basketball data from various sources. The project follows a medallion architecture with DuckDB integration for efficient data processing and storage.</p>"},{"location":"#key-components","title":"Key Components","text":"<ul> <li>Data Pipeline: Extract data from ESPN APIs and transform into analytical datasets</li> <li>Statistical Analysis: Calculate advanced metrics and statistics for teams and players</li> <li>Prediction Models: Machine learning models for game outcome prediction</li> <li>Visualization: Interactive dashboards for exploring the data</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Architecture: Detailed overview of the project's architecture and components</li> <li>Data Pipeline: Implementation details of the data processing pipeline</li> <li>Data Entities: Structure and relationships of the processed data entities</li> <li>Data Directory Structure: Organization of project files and data</li> <li>Configuration Management: Strategy for managing configuration</li> <li>CLI Design: Command-line interface implementation</li> <li>Logging Strategy: Approach to application logging</li> <li>Development Phases: Roadmap and milestones for project development</li> <li>API Reference: Documentation of the ESPN APIs used for data collection</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>For information on how to contribute to this project, please see the Contributing Guidelines in the repository.</p> <p>To understand the overall system architecture, start with the Architecture Overview.</p>"},{"location":"espn-api-reference/","title":"ESPN API","text":"<p>Start new chat Projects Chats Recents Untitled Designing a Scalable Data Pipeline for NCAA Basketball Analytics Guide to Writing Cursor Rules for Agentic AI Developers Cursor Rules for Agentic AI Software Development Restoring a Dried-Out End Grain Cutting Board Structuring NCAA Basketball Data for Analysis and Prediction Structuring Data for NCAA Basketball Analysis Understanding Medallion Data Architecture College Basketball Tournament Matchups GitHub .github Directory Purpose and Configuration High-Level Structure for NCAA Basketball Data Analytics NCAA Basketball Tournament Data Understanding Test-Driven Development Accidentally Committed to Main Branch Researching Avantor: Preparing for a Potential Job Application Dragon Ball Kai Episode Links Integrated Planning Deck Prep Categorizing WRIN data with confidence ratings Understanding SPOD in Chain Restaurants Protecting Your GitHub Main Branch Weekly Productivity Update for Boss Stubborn or Entrenched Subordinate Sustainability Practices in Supply Chain Analyzing Basketball Data Processing Pipeline Interview Guide for Forecast Analyst Hire Choosing Python Dependency Management: Poetry vs. uv Defining Your Career Goals Guidelines for an AI Coding Assistant NCAA Basketball Prediction Project Pronouncing the Polish Name Elzbieta View all Professional plan</p> <p>TM tj1627@gmail.com All projects</p> <p>March Madness Private I'm trying to design a data analytics project to gather data about past ncaa men's basketball games, engineer features and calculate statistics, and then use those to ultimately create different models to predict the outcome of upcoming games. Show more</p> <p>3.7 Sonnet</p> <p>Choose style March Madness No file chosen</p> <p>Untitled Last message 1 minute ago </p> <p>Designing a Scalable Data Pipeline for NCAA Basketball Analytics Last message 1 minute ago </p> <p>High-Level Structure for NCAA Basketball Data Analytics Last message 2 days ago </p> <p>Project knowledge</p> <p>Set project instructions Optional 14% of knowledge capacity used</p> <p>md FEATURE_ENGINEERING.md 2 days ago</p> <p>md docs/index.md 2 days ago</p> <p>txt setup_project.sh 2 days ago</p> <p>md espn-api-reference 2 days ago \u2022 Very large file</p> <p>Claude espn-api-reference.md</p> <p>63.36 KB \u20221,958 lines Formatting may be inconsistent from source</p> <p>title: ESPN API Integration description: Documentation for ESPN API endpoints used for NCAA men's basketball data collection</p>"},{"location":"espn-api-reference/#introduction","title":"ESPN API Integration Documentation","text":"<p>This document provides information about ESPN's undocumented APIs for NCAA men's basketball data. These endpoints are not officially documented by ESPN and may change without notice.</p> <ul> <li>ESPN API Integration Documentation<ul> <li>Base URLs</li> <li>Quick Reference Table</li> <li>Historical Data Availability</li> <li>Global Parameters</li> <li>Team Data<ul> <li>Team Metadata</li> <li>Team Roster</li> <li>Team Schedule</li> <li>Team Statistics</li> </ul> </li> <li>Game Data<ul> <li>Scoreboard</li> <li>Game Summary</li> <li>Tournament Bracket</li> </ul> </li> <li>Rankings &amp; Standings<ul> <li>Rankings</li> <li>Standings</li> </ul> </li> <li>Player Data<ul> <li>Current Season Athletes</li> <li>Historical Athletes</li> <li>Individual Player Details</li> </ul> </li> <li>Other Endpoints<ul> <li>News Endpoint</li> <li>Conferences (Groups) Endpoint</li> </ul> </li> <li>API Limitations and Considerations</li> <li>Testing the APIs</li> <li>Critical Parameters for Data Completeness</li> </ul> </li> </ul>"},{"location":"espn-api-reference/#base-urls","title":"Base URLs","text":"<ul> <li>Primary base URL: <code>http://site.api.espn.com</code></li> <li>Alternative base URLs:</li> <li><code>https://sports.core.api.espn.com</code></li> </ul>"},{"location":"espn-api-reference/#quick-reference","title":"Quick Reference Table","text":"Endpoint URL Pattern Historical Data Parameters Notes Scoreboard <code>/apis/site/v2/sports/basketball/mens-college-basketball/scoreboard</code> Yes (2003+) <code>dates=YYYYMMDD</code>, <code>groups=50</code> Date-specific rather than season-specific Athletes/Players <code>/v3/sports/basketball/mens-college-basketball/athletes</code> Yes Current: noneHistorical: <code>/seasons/{year}/athletes</code> Two different URL patterns Team Schedule <code>/apis/site/v2/sports/basketball/mens-college-basketball/teams/{team}/schedule</code> Yes <code>season=YYYY</code>, <code>seasontype=n</code> Works for historical seasons Team Roster <code>/apis/site/v2/sports/basketball/mens-college-basketball/teams/{team}/roster</code> Limited <code>season=YYYY</code> Limited data before 2020 Team Statistics <code>/apis/site/v2/sports/basketball/mens-college-basketball/teams/{team}/statistics</code> Yes <code>season=YYYY</code> Single team stats All Teams Statistics <code>/v3/sports/basketball/mens-college-basketball/statistics</code> Yes <code>season=YYYY</code>, <code>limit=n</code> All teams stats Rankings <code>/apis/site/v2/sports/basketball/mens-college-basketball/rankings</code> Yes (2010+) <code>season=YYYY</code> AP Poll, Coaches Poll, etc. Standings <code>/apis/site/v2/sports/basketball/mens-college-basketball/standings</code> Yes (2010+) <code>season=YYYY</code> Conference standings Tournament Bracket <code>/v2/sports/basketball/leagues/mens-college-basketball/tournaments/22/seasons/{season}/bracketology</code> Limited <code>{season}</code> in URL Works through 2021 Teams List <code>/apis/site/v2/sports/basketball/mens-college-basketball/teams</code> Season-agnostic <code>page=n</code>, <code>limit=n</code> All teams information Single Team <code>/apis/site/v2/sports/basketball/mens-college-basketball/teams/{team}</code> Season-agnostic <code>team</code> Team metadata Game Summary <code>/apis/site/v2/sports/basketball/mens-college-basketball/summary</code> Season-agnostic <code>event=game_id</code> Detailed game data News <code>/apis/site/v2/sports/basketball/mens-college-basketball/news</code> Season-agnostic None Latest news Conferences <code>/apis/site/v2/sports/basketball/mens-college-basketball/groups</code> Season-agnostic None Conference information"},{"location":"espn-api-reference/#historical-data","title":"Historical Data Availability","text":"<p>Based on research, the ESPN API provides data back to approximately 2003 for NCAA men's basketball. However, there are some considerations:</p> <ol> <li>Data completeness: More recent seasons (2010 onwards) have more complete data</li> <li>Play-by-play data: Available for most games from around 2010 onwards</li> <li>Older seasons: May have limited statistics or missing games</li> <li>Player data: Historical player data requires using season-specific endpoints</li> </ol> <p>Data Verification</p> <p>This documentation was last verified in March 2024. Endpoints may change without notice as these are undocumented APIs.</p>"},{"location":"espn-api-reference/#global-parameters","title":"Global Parameters","text":"<p>Many endpoints support these common parameters:</p> Parameter Description Default Example <code>limit</code> Maximum number of items to return Varies by endpoint <code>limit=100</code> <code>groups=50</code> CRITICAL - Filter to include all Division I games N/A <code>groups=50</code> <code>page</code>/<code>pageIndex</code> Page number for paginated results 1 <code>page=2</code> <code>lang</code> Language for response text \"en\" <code>lang=es</code>"},{"location":"espn-api-reference/#team-data","title":"Team Data","text":""},{"location":"espn-api-reference/#team-metadata","title":"Team Metadata","text":""},{"location":"espn-api-reference/#teams-list","title":"Teams List","text":"<ul> <li>URL: <code>/apis/site/v2/sports/basketball/mens-college-basketball/teams</code></li> <li>Season-agnostic endpoint (not tied to a specific season)</li> <li>Parameters:</li> </ul> Parameter Required Description <code>page=n</code> Optional Get specific page of teams (pagination, 50 teams per page) <code>limit=n</code> Optional Limit number of results <ul> <li>Example curl: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/teams?page=1\"\n</code></pre></li> </ul> Example Response (real data, truncated) <pre><code>{\n  \"count\": 358,\n  \"pageIndex\": 1,\n  \"pageSize\": 50,\n  \"pageCount\": 8,\n  \"items\": [\n    {\n      \"id\": \"2\",\n      \"uid\": \"s:40~l:41~t:2\",\n      \"slug\": \"auburn-tigers\",\n      \"location\": \"Auburn\",\n      \"name\": \"Tigers\",\n      \"nickname\": \"Auburn\",\n      \"abbreviation\": \"AUB\",\n      \"displayName\": \"Auburn Tigers\",\n      \"shortDisplayName\": \"Tigers\",\n      \"color\": \"03244d\",\n      \"alternateColor\": \"f26522\",\n      \"isActive\": true,\n      \"isAllStar\": false,\n      \"logos\": [\n        {\n          \"href\": \"https://a.espncdn.com/i/teamlogos/ncaa/500/2.png\",\n          \"width\": 500,\n          \"height\": 500,\n          \"alt\": \"\",\n          \"rel\": [\"full\", \"default\"],\n          \"lastUpdated\": \"2018-06-05T12:05Z\"\n        }\n      ],\n      \"links\": [\n        {\n          \"language\": \"en-US\",\n          \"rel\": [\"clubhouse\", \"desktop\", \"team\"],\n          \"href\": \"https://www.espn.com/mens-college-basketball/team/_/id/2/auburn-tigers\",\n          \"text\": \"Clubhouse\",\n          \"shortText\": \"Clubhouse\",\n          \"isExternal\": false,\n          \"isPremium\": false\n        }\n      ]\n    },\n    // Additional teams omitted for brevity\n  ]\n}\n</code></pre>"},{"location":"espn-api-reference/#single-team","title":"Single Team","text":"<ul> <li>URL: <code>/apis/site/v2/sports/basketball/mens-college-basketball/teams/{team}</code></li> <li>Parameters:</li> </ul> Parameter Required Description <code>team</code> Required Team ID or abbreviation <ul> <li>Example curl: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/teams/150\"\n</code></pre></li> </ul> Example Response (real data, truncated) <pre><code>{\n  \"team\": {\n    \"id\": \"150\",\n    \"uid\": \"s:40~l:41~t:150\",\n    \"slug\": \"duke-blue-devils\",\n    \"location\": \"Duke\",\n    \"name\": \"Blue Devils\",\n    \"nickname\": \"Duke\",\n    \"abbreviation\": \"DUKE\",\n    \"displayName\": \"Duke Blue Devils\",\n    \"shortDisplayName\": \"Blue Devils\",\n    \"color\": \"001A57\",\n    \"alternateColor\": \"f1f2f3\",\n    \"isActive\": true,\n    \"isAllStar\": false,\n    \"logos\": [\n      {\n        \"href\": \"https://a.espncdn.com/i/teamlogos/ncaa/500/150.png\",\n        \"width\": 500,\n        \"height\": 500,\n        \"alt\": \"\",\n        \"rel\": [\"full\", \"default\"],\n        \"lastUpdated\": \"2018-06-05T12:05Z\"\n      }\n    ],\n    \"record\": {\n      \"items\": [\n        {\n          \"summary\": \"27-9\",\n          \"stats\": [\n            {\n              \"name\": \"playoffSeed\",\n              \"value\": 4\n            },\n            {\n              \"name\": \"wins\",\n              \"value\": 27\n            },\n            {\n              \"name\": \"losses\",\n              \"value\": 9\n            },\n            {\n              \"name\": \"winPercent\",\n              \"value\": 0.75\n            },\n            {\n              \"name\": \"gamesBehind\",\n              \"value\": 0\n            },\n            {\n              \"name\": \"ties\",\n              \"value\": 0\n            },\n            {\n              \"name\": \"OTWins\",\n              \"value\": 0\n            },\n            {\n              \"name\": \"OTLosses\",\n              \"value\": 0\n            },\n            {\n              \"name\": \"gamesPlayed\",\n              \"value\": 36\n            },\n            {\n              \"name\": \"pointsFor\",\n              \"value\": 2639\n            },\n            {\n              \"name\": \"pointsAgainst\",\n              \"value\": 2347\n            },\n            {\n              \"name\": \"avgPointsFor\",\n              \"value\": 73.3\n            },\n            {\n              \"name\": \"avgPointsAgainst\",\n              \"value\": 65.2\n            }\n          ]\n        }\n      ]\n    },\n    \"links\": [\n      {\n        \"language\": \"en-US\",\n        \"rel\": [\"clubhouse\", \"desktop\", \"team\"],\n        \"href\": \"https://www.espn.com/mens-college-basketball/team/_/id/150/duke-blue-devils\",\n        \"text\": \"Clubhouse\",\n        \"shortText\": \"Clubhouse\",\n        \"isExternal\": false,\n        \"isPremium\": false\n      }\n    ],\n    \"nextEvent\": [\n      {\n        \"id\": \"401514211\",\n        \"date\": \"2025-03-15T19:00Z\",\n        \"name\": \"Duke Blue Devils vs. Virginia Cavaliers\",\n        \"shortName\": \"DUKE vs. UVA\",\n        \"seasonType\": {\n          \"id\": \"3\",\n          \"type\": 3,\n          \"name\": \"Postseason\",\n          \"abbreviation\": \"post\"\n        },\n        \"timeValid\": true,\n        \"competitions\": [\n          {\n            \"id\": \"401514211\",\n            \"date\": \"2025-03-15T19:00Z\",\n            \"venue\": {\n              \"fullName\": \"Capital One Arena\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre> <p>See also: Team Roster, Team Schedule</p>"},{"location":"espn-api-reference/#team-roster","title":"Team Roster","text":"<ul> <li>URL: <code>http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/teams/{team}/roster</code></li> <li>Parameters:</li> </ul> Parameter Required Description <code>team</code> Required Team ID or abbreviation <code>season=YYYY</code> Optional Season year (e.g., 2023) <ul> <li>Historical Data Limitations:</li> <li>Current season (2024): Complete rosters (12-24 players)</li> <li>Previous season (2023): Near-complete rosters (6-12 players)</li> <li>2021-2022 seasons: Partial rosters (1-6 players)</li> <li>2020 and earlier: Very limited data (0-1 players or empty)</li> <li>Example curl: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/teams/150/roster?season=2023\"\n</code></pre></li> </ul> Example Response (real data, truncated) <pre><code>{\n  \"timestamp\": \"2025-03-16T21:05:36Z\",\n  \"status\": \"success\",\n  \"season\": {\n    \"year\": 2023,\n    \"displayName\": \"2022-23\"\n  },\n  \"athletes\": [\n    {\n      \"id\": \"4683735\",\n      \"uid\": \"s:40~l:41~a:4683735\",\n      \"guid\": \"f0d1251f68e0d8fe44f81c3034e7ff4a\",\n      \"firstName\": \"Jaylen\",\n      \"lastName\": \"Blakes\",\n      \"fullName\": \"Jaylen Blakes\",\n      \"displayName\": \"Jaylen Blakes\",\n      \"shortName\": \"J. Blakes\",\n      \"weight\": 208,\n      \"displayWeight\": \"208 lbs\",\n      \"height\": 74,\n      \"displayHeight\": \"6' 2\\\"\",\n      \"age\": 21,\n      \"dateOfBirth\": \"2002-12-18\",\n      \"links\": [\n        {\n          \"rel\": [\"playercard\", \"desktop\", \"athlete\"],\n          \"href\": \"https://www.espn.com/mens-college-basketball/player/_/id/4683735/jaylen-blakes\"\n        },\n        {\n          \"rel\": [\"stats\", \"desktop\", \"athlete\"],\n          \"href\": \"http://www.espn.com/mens-college-basketball/player/stats/_/id/4683735/jaylen-blakes\"\n        },\n        {\n          \"rel\": [\"bio\", \"desktop\", \"athlete\"],\n          \"href\": \"http://www.espn.com/mens-college-basketball/player/bio/_/id/4683735/jaylen-blakes\"\n        }\n      ],\n      \"headshot\": {\n        \"href\": \"https://a.espncdn.com/i/headshots/mens-college-basketball/players/full/4683735.png\",\n        \"alt\": \"Jaylen Blakes\"\n      },\n      \"jersey\": \"21\",\n      \"position\": {\n        \"id\": \"3\",\n        \"name\": \"Guard\",\n        \"displayName\": \"Guard\",\n        \"abbreviation\": \"G\",\n        \"displayValue\": \"Guard\"\n      },\n      \"status\": {\n        \"id\": \"active\",\n        \"name\": \"Active\",\n        \"type\": \"active\"\n      },\n      \"experience\": {\n        \"years\": 3,\n        \"displayValue\": \"Junior\"\n      },\n      \"birthPlace\": {\n        \"city\": \"Somerset\",\n        \"state\": \"New Jersey\",\n        \"country\": \"USA\"\n      }\n    }\n  ],\n  \"coach\": [\n    {\n      \"id\": \"31709\",\n      \"firstName\": \"Jon\",\n      \"lastName\": \"Scheyer\",\n      \"experience\": 1\n    }\n  ],\n  \"team\": {\n    \"id\": \"150\",\n    \"uid\": \"s:40~l:41~t:150\",\n    \"slug\": \"duke-blue-devils\",\n    \"location\": \"Duke\",\n    \"name\": \"Blue Devils\",\n    \"nickname\": \"Duke\",\n    \"abbreviation\": \"DUKE\",\n    \"displayName\": \"Duke Blue Devils\",\n    \"shortDisplayName\": \"Blue Devils\",\n    \"color\": \"001A57\",\n    \"alternateColor\": \"f1f2f3\",\n    \"logos\": [\n      {\n        \"href\": \"https://a.espncdn.com/i/teamlogos/ncaa/500/150.png\",\n        \"width\": 500,\n        \"height\": 500,\n        \"alt\": \"\",\n        \"rel\": [\"full\", \"default\"],\n        \"lastUpdated\": \"2018-06-05T12:05Z\"\n      }\n    ],\n    \"recordSummary\": \"27-9\",\n    \"links\": [\n      {\n        \"language\": \"en-US\",\n        \"rel\": [\"clubhouse\", \"desktop\", \"team\"],\n        \"href\": \"https://www.espn.com/mens-college-basketball/team/_/id/150/duke-blue-devils\",\n        \"text\": \"Clubhouse\",\n        \"shortText\": \"Clubhouse\",\n        \"isExternal\": false,\n        \"isPremium\": false\n      }\n    ],\n    \"standingSummary\": \"Finished 5th in ACC\",\n    \"seasonSummary\": \"2022-23\"\n  }\n}\n</code></pre> <p>See also: Player Data, Team Statistics</p>"},{"location":"espn-api-reference/#team-schedule","title":"Team Schedule","text":"<ul> <li>URL: <code>http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/teams/{team}/schedule</code></li> <li>Parameters:</li> </ul> Parameter Required Description <code>team</code> Required Team ID or abbreviation <code>season=YYYY</code> Optional Season year (e.g., 2024) <code>seasontype=n</code> Optional Season type (2=regular, 3=postseason) <ul> <li>Example curl: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/teams/150/schedule?season=2023\"\n</code></pre></li> </ul> Example Response (real data, truncated) <pre><code>{\n  \"timestamp\": \"2025-03-16T21:05:36Z\",\n  \"status\": \"success\",\n  \"season\": {\n    \"year\": 2023,\n    \"displayName\": \"2022-23\"\n  },\n  \"count\": 36,\n  \"pageIndex\": 1,\n  \"pageCount\": 1,\n  \"pageSize\": 36,\n  \"items\": [\n    {\n      \"id\": \"401468042\",\n      \"date\": \"2022-11-07T23:30Z\",\n      \"name\": \"Jacksonville Dolphins at Duke Blue Devils\",\n      \"shortName\": \"JAC @ DUKE\",\n      \"season\": {\n        \"year\": 2023,\n        \"type\": 2,\n        \"slug\": \"regular-season\",\n        \"displayName\": \"Regular Season\"\n      },\n      \"seasonType\": {\n        \"id\": \"2\",\n        \"type\": 2,\n        \"name\": \"Regular Season\",\n        \"abbreviation\": \"reg\"\n      },\n      \"week\": {\n        \"number\": 1\n      },\n      \"competitions\": [\n        {\n          \"id\": \"401468042\",\n          \"date\": \"2022-11-07T23:30Z\",\n          \"attendance\": 9314,\n          \"type\": {\n            \"id\": \"1\",\n            \"text\": \"Standard\",\n            \"abbreviation\": \"STD\",\n            \"slug\": \"standard\"\n          },\n          \"timeValid\": true,\n          \"neutralSite\": false,\n          \"conferenceCompetition\": false,\n          \"playByPlayAvailable\": true,\n          \"commentaryAvailable\": true,\n          \"recent\": false,\n          \"venue\": {\n            \"id\": \"3982\",\n            \"fullName\": \"Cameron Indoor Stadium\",\n            \"address\": {\n              \"city\": \"Durham\",\n              \"state\": \"NC\"\n            },\n            \"capacity\": 9314,\n            \"indoor\": true\n          },\n          \"competitors\": [\n            {\n              \"id\": \"150\",\n              \"type\": \"team\",\n              \"order\": 0,\n              \"homeAway\": \"home\",\n              \"winner\": true,\n              \"score\": {\n                \"value\": 71\n              },\n              \"statistics\": [],\n              \"leaders\": [\n                {\n                  \"name\": \"points\",\n                  \"displayName\": \"Points\",\n                  \"shortDisplayName\": \"Pts\",\n                  \"abbreviation\": \"Pts\",\n                  \"leaders\": [\n                    {\n                      \"displayValue\": \"22\",\n                      \"value\": 22.0,\n                      \"athlete\": {\n                        \"id\": \"5161857\",\n                        \"displayName\": \"Mark Mitchell\"\n                      },\n                      \"team\": {\n                        \"id\": \"150\"\n                      }\n                    }\n                  ]\n                }\n              ],\n              \"team\": {\n                \"id\": \"150\",\n                \"location\": \"Duke\",\n                \"nickname\": \"Blue Devils\",\n                \"abbreviation\": \"DUKE\",\n                \"displayName\": \"Duke Blue Devils\",\n                \"shortDisplayName\": \"Blue Devils\",\n                \"color\": \"001A57\",\n                \"alternateColor\": \"f1f2f3\",\n                \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa/500/150.png\"\n              },\n              \"curatedRank\": {\n                \"current\": 7\n              },\n              \"records\": [\n                {\n                  \"name\": \"overall\",\n                  \"abbreviation\": \"overall\",\n                  \"type\": \"total\",\n                  \"summary\": \"1-0\"\n                }\n              ],\n              \"alerts\": []\n            },\n            {\n              \"id\": \"294\",\n              \"type\": \"team\",\n              \"order\": 1,\n              \"homeAway\": \"away\",\n              \"winner\": false,\n              \"score\": {\n                \"value\": 44\n              },\n              \"statistics\": [],\n              \"leaders\": [\n                {\n                  \"name\": \"points\",\n                  \"displayName\": \"Points\",\n                  \"shortDisplayName\": \"Pts\",\n                  \"abbreviation\": \"Pts\",\n                  \"leaders\": [\n                    {\n                      \"displayValue\": \"12\",\n                      \"value\": 12.0,\n                      \"athlete\": {\n                        \"id\": \"4592446\",\n                        \"displayName\": \"Kevion Nolan\"\n                      },\n                      \"team\": {\n                        \"id\": \"294\"\n                      }\n                    }\n                  ]\n                }\n              ],\n              \"team\": {\n                \"id\": \"294\",\n                \"location\": \"Jacksonville\",\n                \"nickname\": \"Dolphins\",\n                \"abbreviation\": \"JAC\",\n                \"displayName\": \"Jacksonville Dolphins\",\n                \"shortDisplayName\": \"Dolphins\",\n                \"color\": \"004e27\",\n                \"alternateColor\": \"a6abab\",\n                \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa/500/294.png\"\n              },\n              \"curatedRank\": {},\n              \"records\": [\n                {\n                  \"name\": \"overall\",\n                  \"abbreviation\": \"overall\",\n                  \"type\": \"total\",\n                  \"summary\": \"0-1\"\n                }\n              ],\n              \"alerts\": []\n            }\n          ],\n          \"notes\": [],\n          \"status\": {\n            \"type\": {\n              \"id\": \"3\",\n              \"name\": \"STATUS_FINAL\",\n              \"state\": \"post\",\n              \"completed\": true,\n              \"description\": \"Final\",\n              \"detail\": \"Final\",\n              \"shortDetail\": \"Final\"\n            },\n            \"clock\": 0,\n            \"displayClock\": \"0:00\",\n            \"period\": 2,\n            \"featuredAthletes\": []\n          },\n          \"links\": [\n            {\n              \"language\": \"en-US\",\n              \"rel\": [\"summary\", \"desktop\", \"event\"],\n              \"href\": \"https://www.espn.com/mens-college-basketball/game/_/gameId/401468042\",\n              \"text\": \"Box Score\",\n              \"shortText\": \"Box Score\",\n              \"isExternal\": false,\n              \"isPremium\": false\n            },\n            {\n              \"language\": \"en-US\",\n              \"rel\": [\"recap\", \"desktop\", \"event\"],\n              \"href\": \"https://www.espn.com/mens-college-basketball/recap/_/gameId/401468042\",\n              \"text\": \"Recap\",\n              \"shortText\": \"Recap\",\n              \"isExternal\": false,\n              \"isPremium\": false\n            }\n          ],\n          \"broadcasts\": [],\n          \"groups\": {\n            \"id\": \"50\",\n            \"name\": \"Division I\",\n            \"shortName\": \"Division I\",\n            \"isConference\": false\n          }\n        }\n      ],\n      \"links\": [\n        {\n          \"language\": \"en-US\",\n          \"rel\": [\"summary\", \"desktop\", \"event\"],\n          \"href\": \"https://www.espn.com/mens-college-basketball/game/_/gameId/401468042\",\n          \"text\": \"Box Score\",\n          \"shortText\": \"Box Score\",\n          \"isExternal\": false,\n          \"isPremium\": false\n        }\n      ],\n      \"status\": {\n        \"type\": {\n          \"id\": \"3\",\n          \"name\": \"STATUS_FINAL\",\n          \"state\": \"post\",\n          \"completed\": true,\n          \"description\": \"Final\",\n          \"detail\": \"Final\",\n          \"shortDetail\": \"Final\"\n        },\n        \"clock\": 0,\n        \"displayClock\": \"0:00\",\n        \"period\": 2,\n        \"featuredAthletes\": []\n      }\n    }\n  ]\n}\n</code></pre> <p>See also: Game Summary, Scoreboard</p>"},{"location":"espn-api-reference/#team-statistics","title":"Team Statistics","text":""},{"location":"espn-api-reference/#single-team-stats","title":"Current Season Team Stats","text":"<ul> <li>URL: <code>/apis/site/v2/sports/basketball/mens-college-basketball/teams/{team}/statistics</code></li> <li>Parameters:</li> </ul> Parameter Required Description <code>team</code> Required Team ID <code>season=YYYY</code> Optional Season year (e.g., 2023) for historical statistics <ul> <li>Historical data available for past seasons</li> <li>Example curl for current season: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/teams/150/statistics\"\n</code></pre></li> <li>Example curl for historical season: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/teams/150/statistics?season=2023\"\n</code></pre></li> </ul> Example Response (real data, truncated) <pre><code>{\n  \"season\": {\n    \"year\": 2025,\n    \"displayName\": \"2024-25\",\n    \"type\": 2,\n    \"name\": \"Regular Season\"\n  },\n  \"team\": {\n    \"id\": \"150\",\n    \"uid\": \"s:40~l:41~t:150\",\n    \"slug\": \"duke-blue-devils\",\n    \"abbreviation\": \"DUKE\",\n    \"displayName\": \"Duke Blue Devils\",\n    \"shortDisplayName\": \"Blue Devils\",\n    \"name\": \"Blue Devils\",\n    \"location\": \"Duke\",\n    \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa/500/150.png\",\n    \"recordSummary\": \"27-9\"\n  },\n  \"statistics\": [\n    {\n      \"name\": \"rebounds\",\n      \"displayName\": \"Rebounds\",\n      \"shortDisplayName\": \"Reb\",\n      \"description\": \"Rebounds\",\n      \"abbreviation\": \"Reb\",\n      \"value\": 38.7,\n      \"displayValue\": \"38.7\"\n    },\n    {\n      \"name\": \"assists\",\n      \"displayName\": \"Assists\",\n      \"shortDisplayName\": \"Ast\",\n      \"description\": \"Assists\",\n      \"abbreviation\": \"Ast\",\n      \"value\": 14.1,\n      \"displayValue\": \"14.1\"\n    },\n    {\n      \"name\": \"threePointFieldGoalPct\",\n      \"displayName\": \"3-Point FG%\",\n      \"shortDisplayName\": \"3P%\",\n      \"description\": \"3-Point Field Goal Percentage\",\n      \"abbreviation\": \"3P%\",\n      \"value\": 34.9,\n      \"displayValue\": \"34.9\"\n    },\n    {\n      \"name\": \"freeThrowPct\",\n      \"displayName\": \"Free Throw Percentage\",\n      \"shortDisplayName\": \"FT%\",\n      \"description\": \"Free Throw Percentage\",\n      \"abbreviation\": \"FT%\",\n      \"value\": 77.0,\n      \"displayValue\": \"77.0\"\n    },\n    {\n      \"name\": \"points\",\n      \"displayName\": \"Points\",\n      \"shortDisplayName\": \"Pts\",\n      \"description\": \"Points\",\n      \"abbreviation\": \"Pts\",\n      \"value\": 2466,\n      \"displayValue\": \"2466\"\n    },\n    {\n      \"name\": \"fieldGoalPct\",\n      \"displayName\": \"Field Goal Percentage\",\n      \"shortDisplayName\": \"FG%\",\n      \"description\": \"Field Goal Percentage\",\n      \"abbreviation\": \"FG%\",\n      \"value\": 45.1,\n      \"displayValue\": \"45.1\"\n    },\n    {\n      \"name\": \"steals\",\n      \"displayName\": \"Steals\",\n      \"shortDisplayName\": \"Stl\",\n      \"description\": \"Steals\",\n      \"abbreviation\": \"Stl\",\n      \"value\": 5.7,\n      \"displayValue\": \"5.7\"\n    },\n    {\n      \"name\": \"blocks\",\n      \"displayName\": \"Blocks\",\n      \"shortDisplayName\": \"Blk\",\n      \"description\": \"Blocks\",\n      \"abbreviation\": \"Blk\",\n      \"value\": 4.5,\n      \"displayValue\": \"4.5\",\n      \"rankDisplayValue\": \"19th\"\n    },\n    {\n      \"name\": \"pointsPerGame\",\n      \"displayName\": \"Points Per Game\",\n      \"shortDisplayName\": \"PPG\",\n      \"description\": \"Points Per Game\",\n      \"abbreviation\": \"PPG\",\n      \"value\": 72.5,\n      \"displayValue\": \"72.5\"\n    },\n    {\n      \"name\": \"totalTurnovers\",\n      \"displayName\": \"Turnovers\",\n      \"shortDisplayName\": \"TO\",\n      \"description\": \"Turnovers\",\n      \"abbreviation\": \"TO\",\n      \"value\": 11.7,\n      \"displayValue\": \"11.7\"\n    }\n  ]\n}\n</code></pre> <p>See also: Team Roster</p>"},{"location":"espn-api-reference/#all-teams-stats","title":"All Teams Statistics","text":"<ul> <li>URL: <code>/v3/sports/basketball/mens-college-basketball/statistics</code></li> <li>Parameters:</li> </ul> Parameter Required Description <code>limit=n</code> Optional Limit number of results (default: 25) <code>page=n</code> Optional Page number for pagination <code>season=YYYY</code> Optional Season year (e.g., 2023) for historical statistics <ul> <li>Historical data available for past seasons</li> <li>Example curl for current season: <pre><code>curl \"https://sports.core.api.espn.com/v3/sports/basketball/mens-college-basketball/statistics?limit=100\"\n</code></pre></li> <li>Example curl for historical season: <pre><code>curl \"https://sports.core.api.espn.com/v3/sports/basketball/mens-college-basketball/statistics?season=2023&amp;limit=100\"\n</code></pre></li> </ul> Example Response (truncated) <pre><code>{\n  \"count\": 571,\n  \"pageIndex\": 1,\n  \"pageSize\": 5,\n  \"pageCount\": 115,\n  \"items\": [\n    {\n      \"id\": \"2\",\n      \"type\": \"team\",\n      \"statistics\": {\n        \"general\": {\n          \"rebounds\": {\"value\": 1158.0, \"qualified\": true},\n            \"assistTurnoverRatio\": {\"value\": 1.8204225}\n        },\n        \"offensive\": {\n          \"fieldGoalPct\": {\"value\": 0.4851948, \"qualified\": true},\n            \"points\": {\"value\": 2640.0}\n        },\n        \"defensive\": {\n          \"blocks\": {\"value\": 198.0, \"qualified\": true},\n            \"steals\": {\"value\": 218.0}\n          }\n        }\n      }\n  ]\n}\n</code></pre> <p>See also: Team Roster</p>"},{"location":"espn-api-reference/#game-data","title":"Game Data","text":""},{"location":"espn-api-reference/#scoreboard","title":"Scoreboard","text":"<ul> <li>URL: <code>http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/scoreboard</code></li> <li>Date-based, indirectly season-specific</li> <li>Parameters:</li> </ul> Parameter Required Description <code>dates=YYYYMMDD</code> Optional Specific date in YYYYMMDD format <code>groups=50</code> Critical Filter to include all Division I games <code>limit=n</code> Optional Limit number of results (default: 100) <ul> <li>Historical data available from approximately 2003</li> <li>Example curl: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/scoreboard?dates=20230311&amp;groups=50&amp;limit=100\"\n</code></pre></li> </ul> Example Response (real data, truncated) <pre><code>{\n  \"leagues\": [\n    {\n      \"id\": \"41\",\n      \"uid\": \"s:40~l:41\",\n      \"name\": \"NCAA Men's Basketball\",\n      \"abbreviation\": \"NCAAM\",\n      \"slug\": \"mens-college-basketball\",\n      \"season\": {\n        \"year\": 2023,\n        \"startDate\": \"2022-11-07T08:00Z\",\n        \"endDate\": \"2023-04-04T04:00Z\",\n        \"type\": {\n          \"id\": \"2\",\n          \"type\": 2,\n          \"name\": \"Regular Season\",\n          \"abbreviation\": \"reg\"\n        }\n      },\n      \"calendarType\": \"day\",\n      \"calendarIsWhitelist\": true,\n      \"calendarStartDate\": \"2022-11-07T08:00Z\",\n      \"calendarEndDate\": \"2023-04-04T04:00Z\",\n      \"calendar\": [\n        \"20230311\"\n      ]\n    }\n  ],\n  \"season\": {\n    \"type\": 2,\n    \"year\": 2023\n  },\n  \"day\": {\n    \"date\": \"20230311\"\n  },\n  \"events\": [\n    {\n      \"id\": \"401499491\",\n      \"uid\": \"s:40~l:41~e:401499491\",\n      \"date\": \"2023-03-11T17:00Z\",\n      \"name\": \"Iona Gaels vs. Marist Red Foxes\",\n      \"shortName\": \"IONA vs. MRST\",\n      \"season\": {\n        \"year\": 2023,\n        \"type\": 3,\n        \"slug\": \"postseason\"\n      },\n      \"competitions\": [\n        {\n          \"id\": \"401499491\",\n          \"uid\": \"s:40~l:41~e:401499491~c:401499491\",\n          \"date\": \"2023-03-11T17:00Z\",\n          \"attendance\": 0,\n          \"type\": {\n            \"id\": \"1\",\n            \"abbreviation\": \"STD\"\n          },\n          \"timeValid\": true,\n          \"neutralSite\": true,\n          \"conferenceCompetition\": true,\n          \"playByPlayAvailable\": true,\n          \"recent\": false,\n          \"venue\": {\n            \"id\": \"1964\",\n            \"fullName\": \"Boardwalk Hall\"\n          },\n          \"competitors\": [\n            {\n              \"id\": \"314\",\n              \"uid\": \"s:40~l:41~t:314\",\n              \"type\": \"team\",\n              \"order\": 0,\n              \"homeAway\": \"home\",\n              \"winner\": true,\n              \"score\": \"76\",\n              \"statistics\": [],\n              \"leaders\": [\n                {\n                  \"name\": \"points\",\n                  \"displayName\": \"Points\",\n                  \"leaders\": [\n                    {\n                      \"displayValue\": \"20\",\n                      \"value\": 20,\n                      \"athlete\": {\n                        \"id\": \"4432609\",\n                        \"fullName\": \"Walter Clayton Jr.\",\n                        \"displayName\": \"Walter Clayton Jr.\",\n                        \"shortName\": \"W. Clayton Jr.\",\n                        \"links\": [\n                          {\n                            \"rel\": [\"playercard\", \"desktop\", \"athlete\"],\n                            \"href\": \"https://www.espn.com/mens-college-basketball/player/_/id/4432609/walter-clayton-jr\"\n                          }\n                        ]\n                      },\n                      \"team\": {\n                        \"id\": \"314\"\n                      }\n                    }\n                  ]\n                }\n              ],\n              \"team\": {\n                \"id\": \"314\",\n                \"uid\": \"s:40~l:41~t:314\",\n                \"location\": \"Iona\",\n                \"name\": \"Gaels\",\n                \"abbreviation\": \"IONA\",\n                \"displayName\": \"Iona Gaels\",\n                \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa/500/314.png\"\n              },\n              \"records\": [\n                {\n                  \"name\": \"overall\",\n                  \"abbreviation\": \"Game\",\n                  \"type\": \"total\",\n                  \"summary\": \"27-7\"\n                }\n              ]\n            },\n            {\n              \"id\": \"2368\",\n              \"uid\": \"s:40~l:41~t:2368\",\n              \"type\": \"team\",\n              \"order\": 1,\n              \"homeAway\": \"away\",\n              \"winner\": false,\n              \"score\": \"55\",\n              \"statistics\": [],\n              \"leaders\": [\n                {\n                  \"name\": \"points\",\n                  \"displayName\": \"Points\",\n                  \"leaders\": [\n                    {\n                      \"displayValue\": \"13\",\n                      \"value\": 13,\n                      \"athlete\": {\n                        \"id\": \"4433076\",\n                        \"fullName\": \"Patrick Gardner\",\n                        \"displayName\": \"Patrick Gardner\",\n                        \"shortName\": \"P. Gardner\",\n                        \"links\": [\n                          {\n                            \"rel\": [\"playercard\", \"desktop\", \"athlete\"],\n                            \"href\": \"https://www.espn.com/mens-college-basketball/player/_/id/4433076/patrick-gardner\"\n                          }\n                        ]\n                      },\n                      \"team\": {\n                        \"id\": \"2368\"\n                      }\n                    }\n                  ]\n                }\n              ],\n              \"team\": {\n                \"id\": \"2368\",\n                \"uid\": \"s:40~l:41~t:2368\",\n                \"location\": \"Marist\",\n                \"name\": \"Red Foxes\",\n                \"abbreviation\": \"MRST\",\n                \"displayName\": \"Marist Red Foxes\",\n                \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa/500/2368.png\"\n              },\n              \"records\": [\n                {\n                  \"name\": \"overall\",\n                  \"abbreviation\": \"Game\",\n                  \"type\": \"total\",\n                  \"summary\": \"13-20\"\n                }\n              ]\n            }\n          ],\n          \"notes\": [],\n          \"status\": {\n            \"clock\": 0,\n            \"displayClock\": \"0:00\",\n            \"period\": 2,\n            \"type\": {\n              \"id\": \"3\",\n              \"name\": \"STATUS_FINAL\",\n              \"state\": \"post\",\n              \"completed\": true,\n              \"description\": \"Final\",\n              \"detail\": \"Final\",\n              \"shortDetail\": \"Final\"\n            }\n          },\n          \"broadcasts\": [],\n          \"format\": {\n            \"regulation\": {\n              \"periods\": 2\n            }\n          },\n          \"startDate\": \"2023-03-11T17:00Z\",\n          \"geoBroadcasts\": [],\n          \"headlines\": [\n            {\n              \"shortLinkText\": \"Iona wins 76-55 against Marist\",\n              \"description\": \"\u2014 ATLANTIC CITY, N.J. \u2014 Walter Clayton Jr.'s 20 points helped Iona defeat Marist 76-55 in the Metro Atlantic Athletic Conference Tournament semifinals on Saturday.\"\n            }\n          ]\n        }\n      ],\n      \"status\": {\n        \"clock\": 0,\n        \"displayClock\": \"0:00\",\n        \"period\": 2,\n        \"type\": {\n          \"id\": \"3\",\n          \"name\": \"STATUS_FINAL\",\n          \"state\": \"post\",\n          \"completed\": true,\n          \"description\": \"Final\",\n          \"detail\": \"Final\",\n          \"shortDetail\": \"Final\"\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>See also: Game Summary, Team Schedule</p>"},{"location":"espn-api-reference/#game-summary","title":"Game Summary","text":"<ul> <li>URL: <code>http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/summary</code></li> <li>Season-agnostic endpoint</li> <li>Parameters:</li> </ul> Parameter Required Description <code>event=game_id</code> Required Game ID (e.g., \"401479672\") <ul> <li>Retrieves detailed game information by game ID</li> <li>Example curl: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/summary?event=401514211\"\n</code></pre></li> </ul> Example Response (real data, key sections) <pre><code>{\n  \"header\": {\n    \"id\": \"401514211\",\n    \"uid\": \"s:40~l:41~e:401514211\",\n    \"season\": {\n      \"year\": 2025,\n      \"type\": 3,\n      \"slug\": \"postseason\"\n    },\n    \"timeValid\": true,\n    \"competitions\": [\n      {\n        \"id\": \"401514211\",\n        \"uid\": \"s:40~l:41~e:401514211~c:401514211\",\n        \"date\": \"2025-03-15T19:00Z\",\n        \"neutralSite\": true,\n        \"conferenceCompetition\": true,\n        \"boxscoreAvailable\": true,\n        \"commentaryAvailable\": true,\n        \"liveAvailable\": true,\n        \"onWatchESPN\": true,\n        \"recent\": false,\n        \"wasSuspended\": false,\n        \"statusName\": \"STATUS_FINAL\",\n        \"competitors\": [\n          {\n            \"id\": \"150\",\n            \"uid\": \"s:40~l:41~t:150\",\n            \"type\": \"team\",\n            \"order\": 0,\n            \"homeAway\": \"home\",\n            \"winner\": true,\n            \"score\": \"59\",\n            \"curatedRank\": {\n              \"current\": 1\n            },\n            \"team\": {\n              \"id\": \"150\",\n              \"uid\": \"s:40~l:41~t:150\",\n              \"location\": \"Duke\",\n              \"name\": \"Blue Devils\",\n              \"nickname\": \"Duke\",\n              \"abbreviation\": \"DUKE\",\n              \"displayName\": \"Duke Blue Devils\",\n              \"color\": \"001A57\"\n            }\n          },\n          {\n            \"id\": \"258\",\n            \"uid\": \"s:40~l:41~t:258\",\n            \"type\": \"team\",\n            \"order\": 1,\n            \"homeAway\": \"away\",\n            \"winner\": false,\n            \"score\": \"49\",\n            \"curatedRank\": {\n              \"current\": 10\n            },\n            \"team\": {\n              \"id\": \"258\",\n              \"uid\": \"s:40~l:41~t:258\",\n              \"location\": \"Virginia\",\n              \"name\": \"Cavaliers\",\n              \"nickname\": \"Virginia\",\n              \"abbreviation\": \"UVA\",\n              \"displayName\": \"Virginia Cavaliers\",\n              \"color\": \"00204e\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n  \"scoringPlays\": [\n    {\n      \"id\": \"401514211318\",\n      \"type\": {\n        \"id\": \"2\",\n        \"text\": \"Made Shot\",\n        \"abbreviation\": \"MDS\"\n      },\n      \"text\": \"Kyle Filipowski made Jumper.\",\n      \"awayScore\": 0,\n      \"homeScore\": 2,\n      \"period\": {\n        \"number\": 1\n      },\n      \"clock\": {\n        \"displayValue\": \"19:27\"\n      },\n      \"scoringType\": {\n        \"name\": \"field-goal\",\n        \"displayName\": \"Field Goal\",\n        \"abbreviation\": \"FG\"\n      },\n      \"scoringTeam\": {\n        \"id\": \"150\"\n      },\n      \"shootingPlay\": true,\n      \"coordinate\": {\n        \"x\": 51,\n        \"y\": 11\n      }\n    }\n  ],\n  \"boxscore\": {\n    \"teams\": [\n      {\n        \"team\": {\n          \"id\": \"150\",\n          \"uid\": \"s:40~l:41~t:150\",\n          \"displayName\": \"Duke Blue Devils\"\n        },\n        \"statistics\": [\n          {\n            \"name\": \"rebounds\",\n            \"displayValue\": \"32\",\n            \"label\": \"Rebounds\"\n          },\n          {\n            \"name\": \"fieldGoalsAttempted\",\n            \"displayValue\": \"41\",\n            \"label\": \"FGA\"\n          },\n          {\n            \"name\": \"fieldGoalsMade\",\n            \"displayValue\": \"22\",\n            \"label\": \"FGM\"\n          },\n          {\n            \"name\": \"fieldGoalPct\",\n            \"displayValue\": \"53.7\",\n            \"label\": \"FG%\"\n          },\n          {\n            \"name\": \"threePointFieldGoalsAttempted\",\n            \"displayValue\": \"21\",\n            \"label\": \"3PA\"\n          },\n          {\n            \"name\": \"threePointFieldGoalsMade\",\n            \"displayValue\": \"6\",\n            \"label\": \"3PM\"\n          },\n          {\n            \"name\": \"threePointFieldGoalPct\",\n            \"displayValue\": \"28.6\",\n            \"label\": \"3P%\"\n          },\n          {\n            \"name\": \"freeThrowsAttempted\",\n            \"displayValue\": \"12\",\n            \"label\": \"FTA\"\n          },\n          {\n            \"name\": \"freeThrowsMade\",\n            \"displayValue\": \"9\",\n            \"label\": \"FTM\"\n          },\n          {\n            \"name\": \"freeThrowPct\",\n            \"displayValue\": \"75.0\",\n            \"label\": \"FT%\"\n          },\n          {\n            \"name\": \"assists\",\n            \"displayValue\": \"8\",\n            \"label\": \"AST\"\n          },\n          {\n            \"name\": \"steals\",\n            \"displayValue\": \"4\",\n            \"label\": \"STL\"\n          },\n          {\n            \"name\": \"blocks\",\n            \"displayValue\": \"5\",\n            \"label\": \"BLK\"\n          },\n          {\n            \"name\": \"totalTurnovers\",\n            \"displayValue\": \"12\",\n            \"label\": \"TO\"\n          },\n          {\n            \"name\": \"fouls\",\n            \"displayValue\": \"10\",\n            \"label\": \"FOULS\"\n          }\n        ]\n      }\n    ],\n    \"players\": [\n      {\n        \"team\": {\n          \"id\": \"150\",\n          \"uid\": \"s:40~l:41~t:150\"\n        },\n        \"statistics\": [\n          {\n            \"names\": [\n              \"minsPlayed\",\n              \"fieldGoalsMade\",\n              \"fieldGoalsAttempted\",\n              \"fieldGoalPct\",\n              \"threePointMade\",\n              \"threePointAttempted\",\n              \"threePointPct\",\n              \"freeThrowsMade\",\n              \"freeThrowsAttempted\",\n              \"freeThrowPct\",\n              \"reboundsOffensive\",\n              \"reboundsDefensive\",\n              \"reboundsTotal\",\n              \"assists\",\n              \"steals\",\n              \"blocks\",\n              \"turnovers\",\n              \"foulsPersonal\",\n              \"points\",\n              \"plusMinus\"\n            ],\n            \"totals\": [\n              200,\n              22,\n              41,\n              0.5365853,\n              6,\n              21,\n              0.2857143,\n              9,\n              12,\n              0.75,\n              5,\n              27,\n              32,\n              8,\n              4,\n              5,\n              12,\n              10,\n              59,\n              10\n            ],\n            \"athletes\": [\n              {\n                \"athlete\": {\n                  \"id\": \"5203685\",\n                  \"uid\": \"s:40~l:41~a:5203685\",\n                  \"guid\": \"2cf33fe2-4a92-3188-9d87-78ac5aac53be\",\n                  \"displayName\": \"Khaman Maluach\",\n                  \"shortName\": \"K. Maluach\",\n                  \"active\": true,\n                  \"headshot\": {\n                    \"href\": \"https://a.espncdn.com/i/headshots/mens-college-basketball/players/full/5203685.png\",\n                    \"alt\": \"Khaman Maluach\"\n                  },\n                  \"position\": {\n                    \"abbreviation\": \"C\"\n                  },\n                  \"jersey\": \"15\",\n                  \"links\": [\n                    {\n                      \"rel\": [\"playercard\", \"desktop\", \"athlete\"],\n                      \"href\": \"https://www.espn.com/mens-college-basketball/player/_/id/5203685/khaman-maluach\"\n                    }\n                  ]\n                },\n                \"starter\": true,\n                \"didNotPlay\": false,\n                \"reason\": null,\n                \"stats\": [\n                  \"29\",\n                  \"6\",\n                  \"9\",\n                  \".667\",\n                  \"0\",\n                  \"0\",\n                  \".000\",\n                  \"3\",\n                  \"3\",\n                  \"1.000\",\n                  \"1\",\n                  \"9\",\n                  \"10\",\n                  \"0\",\n                  \"2\",\n                  \"2\",\n                  \"0\",\n                  \"0\",\n                  \"15\",\n                  \"4\"\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre> <p>See also: Scoreboard</p>"},{"location":"espn-api-reference/#tournament-bracket","title":"Tournament Bracket","text":"<ul> <li>URL: <code>/v2/sports/basketball/leagues/mens-college-basketball/tournaments/22/seasons/{season}/bracketology</code></li> <li>Explicitly season-specific</li> <li>Parameters:</li> </ul> Parameter Required Description <code>{season}</code> Required Season year (e.g., 2021) <ul> <li>Reports indicate this works for years up to 2021</li> <li>Example curl: <pre><code>curl \"http://site.api.espn.com/v2/sports/basketball/leagues/mens-college-basketball/tournaments/22/seasons/2021/bracketology\"\n</code></pre></li> </ul>"},{"location":"espn-api-reference/#rankings-standings","title":"Rankings &amp; Standings","text":""},{"location":"espn-api-reference/#rankings","title":"Rankings","text":"<ul> <li>URL: <code>/apis/site/v2/sports/basketball/mens-college-basketball/rankings</code></li> <li>Defaults to current season rankings</li> <li>Parameters:</li> </ul> Parameter Required Description <code>season=YYYY</code> Optional Season year (e.g., 2023) for historical rankings <ul> <li>Historical data available back to at least 2010</li> <li>Example curl for current rankings: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/rankings\"\n</code></pre></li> <li>Example curl for historical rankings: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/rankings?season=2023\"\n</code></pre></li> </ul> Example Response (real data, truncated) <pre><code>{\n  \"rankings\": [\n    {\n      \"id\": 1,\n      \"name\": \"AP Top 25\",\n      \"abbreviation\": \"AP\",\n      \"type\": \"ap_poll\",\n      \"headline\": \"2024-25 AP Poll\",\n      \"shortHeadline\": \"AP Poll 2025\",\n      \"pollData\": {\n        \"seasonId\": 2025,\n        \"seasonName\": \"2024-25\",\n        \"seasonYear\": 2025,\n        \"updateDate\": \"2025-03-10T17:00:00Z\",\n        \"currentWeek\": 19,\n        \"finalWeek\": true\n      },\n      \"ranks\": [\n        {\n          \"current\": 1,\n          \"previous\": 1,\n          \"trend\": 0,\n          \"points\": 1600,\n          \"firstPlaceVotes\": 64,\n          \"lastUpdated\": \"2025-03-10T17:00:00Z\",\n          \"moreStats\": {\n            \"rank\": 1,\n            \"week\": 19,\n            \"rankChange\": 0\n          },\n          \"team\": {\n            \"id\": \"150\",\n            \"uid\": \"s:40~l:41~t:150\",\n            \"location\": \"Duke\",\n            \"name\": \"Blue Devils\",\n            \"abbreviation\": \"DUKE\",\n            \"displayName\": \"Duke Blue Devils\",\n            \"clubhouse\": \"https://www.espn.com/mens-college-basketball/team/_/id/150/duke-blue-devils\",\n            \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa/500/150.png\",\n            \"logoDark\": \"https://a.espncdn.com/i/teamlogos/ncaa/500-dark/150.png\",\n            \"links\": [\n              {\n                \"rel\": [\"clubhouse\", \"desktop\", \"team\"],\n                \"href\": \"https://www.espn.com/mens-college-basketball/team/_/id/150/duke-blue-devils\",\n                \"text\": \"Clubhouse\"\n              }\n            ]\n          }\n        },\n        {\n          \"current\": 2,\n          \"previous\": 2,\n          \"trend\": 0,\n          \"points\": 1535,\n          \"firstPlaceVotes\": 0,\n          \"lastUpdated\": \"2025-03-10T17:00:00Z\",\n          \"moreStats\": {\n            \"rank\": 2,\n            \"week\": 19,\n            \"rankChange\": 0\n          },\n          \"team\": {\n            \"id\": \"248\",\n            \"uid\": \"s:40~l:41~t:248\",\n            \"location\": \"Houston\",\n            \"name\": \"Cougars\",\n            \"abbreviation\": \"HOU\",\n            \"displayName\": \"Houston Cougars\",\n            \"clubhouse\": \"https://www.espn.com/mens-college-basketball/team/_/id/248/houston-cougars\",\n            \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa/500/248.png\",\n            \"logoDark\": \"https://a.espncdn.com/i/teamlogos/ncaa/500-dark/248.png\",\n            \"links\": [\n              {\n                \"rel\": [\"clubhouse\", \"desktop\", \"team\"],\n                \"href\": \"https://www.espn.com/mens-college-basketball/team/_/id/248/houston-cougars\",\n                \"text\": \"Clubhouse\"\n              }\n            ]\n          }\n        },\n        {\n          \"current\": 3,\n          \"previous\": 3,\n          \"trend\": 0,\n          \"points\": 1465,\n          \"firstPlaceVotes\": 0,\n          \"lastUpdated\": \"2025-03-10T17:00:00Z\",\n          \"moreStats\": {\n            \"rank\": 3,\n            \"week\": 19,\n            \"rankChange\": 0\n          },\n          \"team\": {\n            \"id\": \"2\",\n            \"uid\": \"s:40~l:41~t:2\",\n            \"location\": \"Auburn\",\n            \"name\": \"Tigers\",\n            \"abbreviation\": \"AUB\",\n            \"displayName\": \"Auburn Tigers\",\n            \"clubhouse\": \"https://www.espn.com/mens-college-basketball/team/_/id/2/auburn-tigers\",\n            \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa/500/2.png\",\n            \"logoDark\": \"https://a.espncdn.com/i/teamlogos/ncaa/500-dark/2.png\",\n            \"links\": [\n              {\n                \"rel\": [\"clubhouse\", \"desktop\", \"team\"],\n                \"href\": \"https://www.espn.com/mens-college-basketball/team/_/id/2/auburn-tigers\",\n                \"text\": \"Clubhouse\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"espn-api-reference/#standings","title":"Standings","text":"<ul> <li>URL: <code>/apis/site/v2/sports/basketball/mens-college-basketball/standings</code></li> <li>Alternative URL: <code>https://site.web.api.espn.com/apis/v2/sports/basketball/mens-college-basketball/standings</code></li> <li>Defaults to current season standings</li> <li>Parameters:</li> </ul> Parameter Required Description <code>season=YYYY</code> Optional Season year (e.g., 2023) for historical standings <code>region=us&amp;lang=en&amp;contentorigin=espn</code> Optional Additional parameters for alternative URL <ul> <li>Historical data available back to at least 2010</li> <li>Example curl for current standings: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/standings\"\n</code></pre></li> <li>Example curl for historical standings: <pre><code>curl \"https://site.web.api.espn.com/apis/v2/sports/basketball/mens-college-basketball/standings?region=us&amp;lang=en&amp;contentorigin=espn&amp;season=2023\"\n</code></pre></li> </ul>"},{"location":"espn-api-reference/#player-data","title":"Player Data","text":""},{"location":"espn-api-reference/#current-athletes","title":"Current Season Athletes","text":"<ul> <li>URL: <code>/v3/sports/basketball/mens-college-basketball/athletes</code></li> <li>Defaults to current season</li> <li>Parameters:</li> </ul> Parameter Required Description <code>limit=n</code> Optional Limit number of results (default: 25, can set high value like 10000) <ul> <li>Example curl: <pre><code>curl \"https://sports.core.api.espn.com/v3/sports/basketball/mens-college-basketball/athletes?limit=10000\"\n</code></pre></li> </ul>"},{"location":"espn-api-reference/#historical-athletes","title":"Historical Athletes","text":"<ul> <li>URL: <code>/v3/sports/basketball/mens-college-basketball/seasons/{year}/athletes</code></li> <li>Explicitly requires season year in URL</li> <li>Parameters:</li> </ul> Parameter Required Description <code>{year}</code> Required Season year in URL path <code>limit=n</code> Optional Limit number of results <ul> <li>Example curl: <pre><code>curl \"https://sports.core.api.espn.com/v3/sports/basketball/mens-college-basketball/seasons/2023/athletes?limit=1000\"\n</code></pre></li> </ul>"},{"location":"espn-api-reference/#player-details","title":"Individual Player Details","text":"<ul> <li>URL: <code>/v3/sports/basketball/mens-college-basketball/athletes/{playerID}</code></li> <li>Retrieves detailed data for specific player</li> <li>Parameters:</li> </ul> Parameter Required Description <code>{playerID}</code> Required Player ID in URL path <ul> <li>Example curl: <pre><code>curl \"https://sports.core.api.espn.com/v3/sports/basketball/mens-college-basketball/athletes/5158125\"\n</code></pre></li> </ul> Example Response (truncated) <pre><code>{\n  \"id\": \"5158125\",\n  \"guid\": \"f75b0cea22c5e38b90efff8f15386271\",\n  \"uid\": \"s:40~l:41~a:5158125\",\n  \"type\": \"athlete\",\n  \"firstName\": \"TJ\",\n  \"lastName\": \"Power\",\n  \"fullName\": \"TJ Power\",\n  \"displayName\": \"TJ Power\",\n  \"shortName\": \"T. Power\",\n  \"weight\": 210,\n  \"displayWeight\": \"210 lbs\",\n  \"height\": 81,\n  \"displayHeight\": \"6' 9\\\"\",\n  \"age\": 19,\n  \"jersey\": \"0\",\n                  \"position\": {\n    \"id\": 5,\n    \"name\": \"Forward\",\n    \"displayName\": \"Forward\",\n    \"abbreviation\": \"F\"\n  }\n}\n</code></pre> <p>See also: Team Roster</p>"},{"location":"espn-api-reference/#other-endpoints","title":"Other Endpoints","text":""},{"location":"espn-api-reference/#news","title":"News Endpoint","text":"<ul> <li>URL: <code>/apis/site/v2/sports/basketball/mens-college-basketball/news</code></li> <li>Retrieves latest news, not season-specific</li> <li>Parameters: </li> </ul> Parameter Required Description <code>team</code> Optional Team ID to filter news for a specific team <ul> <li>Example curl: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/news\"\n</code></pre></li> <li>Example curl for team-specific news: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/news?team=150\"\n</code></pre></li> </ul> Example Response (real data, truncated) <pre><code>{\n  \"header\": \"Men's College Basketball News\",\n  \"link\": {\n    \"language\": \"en\",\n    \"rel\": [\"index\", \"desktop\", \"league\"],\n    \"href\": \"https://www.espn.com/mens-college-basketball/\",\n    \"text\": \"All NCAAM News\",\n    \"shortText\": \"All News\",\n    \"isExternal\": false,\n    \"isPremium\": false\n  },\n  \"articles\": [\n    {\n      \"dataSourceIdentifier\": \"49558377fabf1\",\n      \"type\": \"Story\",\n      \"headline\": \"Men's Champ Week 2025: tournament schedules, auto-bids, more\",\n      \"description\": \"We tracked all 31 men's college basketball conference tournaments including every automatic bid winner in the lead up to March Madness.\",\n      \"lastModified\": \"2025-03-16T21:39:40Z\",\n      \"published\": \"2025-03-16T21:39:00Z\",\n      \"images\": [\n        {\n          \"dataSourceIdentifier\": \"db5856cf6a333\",\n          \"id\": 44262983,\n          \"type\": \"header\",\n          \"name\": \"American University 2025 ticket punched [1296x729]\",\n          \"caption\": \"American University is returning to the NCAA tournament for the first time since 2014, after defeating Navy in the Patriot League title game.\",\n          \"credit\": \"AP Photo/Terrance Williams\",\n          \"height\": 729,\n          \"width\": 1296,\n          \"url\": \"https://a.espncdn.com/photo/2025/0315/r1464565_1296x729_16-9.jpg\"\n        }\n      ],\n      \"categories\": [\n        {\n          \"id\": 3155,\n          \"type\": \"team\",\n          \"uid\": \"s:40~l:41~t:150\",\n          \"guid\": \"c4430c6c-5998-47d5-7c45-1cdb7ca0befc\",\n          \"description\": \"Duke Blue Devils\",\n          \"sportId\": 41,\n          \"teamId\": 150,\n          \"team\": {\n            \"id\": 150,\n            \"description\": \"Duke Blue Devils\",\n            \"links\": {\n              \"web\": {\n                \"teams\": {\n                  \"href\": \"https://www.espn.com/mens-college-basketball/team/_/id/150/duke-blue-devils\"\n                }\n              },\n              \"mobile\": {\n                \"teams\": {\n                  \"href\": \"https://www.espn.com/mens-college-basketball/team/_/id/150/duke-blue-devils\"\n                }\n              }\n            }\n          }\n        }\n      ],\n      \"premium\": false,\n      \"links\": {\n        \"web\": {\n          \"href\": \"https://www.espn.com/mens-college-basketball/story/_/id/43734580/mens-college-basketball-champ-week-2025-tournament-brackets-schedule-sites-bids-stats-history\"\n        },\n        \"mobile\": {\n          \"href\": \"http://m.espn.go.com/wireless/story?storyId=43734580\"\n        },\n        \"api\": {\n          \"self\": {\n            \"href\": \"https://content.core.api.espn.com/v1/sports/news/43734580\"\n          }\n        },\n        \"app\": {\n          \"sportscenter\": {\n            \"href\": \"sportscenter://x-callback-url/showStory?uid=43734580\"\n          }\n        }\n      },\n      \"byline\": \"ESPN\"\n    },\n    {\n      \"dataSourceIdentifier\": \"881068e715fdd\",\n      \"type\": \"Eticket\",\n      \"headline\": \"NCAA Bracketology: 2025 March Madness men's field predictions\",\n      \"description\": \"There's little any team can do now about its chances, so take a look at the final projected NCAA tournament field for 2025. Watch the men's bracket reveal starting at 6 p.m. ET on ESPN.\",\n      \"lastModified\": \"2025-03-16T21:58:48Z\",\n      \"published\": \"2025-03-16T07:00:00Z\",\n      \"images\": [\n        {\n          \"dataSourceIdentifier\": \"51b04a33bb1c2\",\n          \"id\": 44226841,\n          \"type\": \"header\",\n          \"name\": \"Tre Johnson [1296x729]\",\n          \"credit\": \"Petre Thomas-Imagn Images\",\n          \"height\": 729,\n          \"width\": 1296,\n          \"url\": \"https://a.espncdn.com/photo/2025/0313/r1463379_1296x729_16-9.jpg\"\n        }\n      ],\n      \"categories\": [\n        {\n          \"id\": 3155,\n          \"type\": \"team\",\n          \"uid\": \"s:40~l:41~t:150\",\n          \"guid\": \"c4430c6c-5998-47d5-7c45-1cdb7ca0befc\",\n          \"description\": \"Duke Blue Devils\",\n          \"sportId\": 41,\n          \"teamId\": 150,\n          \"team\": {\n            \"id\": 150,\n            \"description\": \"Duke Blue Devils\",\n            \"links\": {\n              \"web\": {\n                \"teams\": {\n                  \"href\": \"https://www.espn.com/mens-college-basketball/team/_/id/150/duke-blue-devils\"\n                }\n              },\n              \"mobile\": {\n                \"teams\": {\n                  \"href\": \"https://www.espn.com/mens-college-basketball/team/_/id/150/duke-blue-devils\"\n                }\n              }\n            }\n          }\n        }\n      ],\n      \"premium\": false,\n      \"links\": {\n        \"web\": {\n          \"href\": \"https://www.espn.com/espn/feature/story/_/page/bracketology/ncaa-bracketology-2025-march-madness-men-field-predictions\"\n        },\n        \"mobile\": {\n          \"href\": \"http://m.espn.go.com/wireless/story?storyId=30302581\"\n        },\n        \"api\": {\n          \"self\": {\n            \"href\": \"https://content.core.api.espn.com/v1/sports/news/30302581\"\n          }\n        },\n        \"app\": {\n          \"sportscenter\": {\n            \"href\": \"sportscenter://x-callback-url/showStory?uid=30302581\"\n          }\n        }\n      },\n      \"byline\": \"Joe Lunardi\"\n    }\n  ]\n}\n</code></pre> <p>See also: Team Data</p>"},{"location":"espn-api-reference/#conferences","title":"Conferences (Groups) Endpoint","text":"<ul> <li>URL: <code>/apis/site/v2/sports/basketball/mens-college-basketball/scoreboard/conferences</code></li> <li>Retrieves conference information</li> <li>Example curl: <pre><code>curl \"http://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/scoreboard/conferences\"\n</code></pre></li> </ul> Example Response (real data, truncated) <pre><code>{\n  \"conferences\": [\n    {\n      \"id\": \"2\",\n      \"name\": \"Atlantic Coast Conference\",\n      \"shortName\": \"ACC\",\n      \"groupId\": \"1\",\n      \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa_conf/500/acc.png\",\n      \"teams\": []\n    },\n    {\n      \"id\": \"4\",\n      \"name\": \"Big Ten Conference\",\n      \"shortName\": \"Big Ten\",\n      \"groupId\": \"5\",\n      \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa_conf/500/b1g.png\",\n      \"teams\": []\n    },\n    {\n      \"id\": \"8\",\n      \"name\": \"Big 12 Conference\",\n      \"shortName\": \"Big 12\",\n      \"groupId\": \"4\",\n      \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa_conf/500/b12.png\",\n      \"teams\": []\n    },\n    {\n      \"id\": \"5\",\n      \"name\": \"Big East Conference\",\n      \"shortName\": \"Big East\",\n      \"groupId\": \"3\",\n      \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa_conf/500/bigeast.png\",\n      \"teams\": []\n    },\n    {\n      \"id\": \"21\",\n      \"name\": \"Pac-12 Conference\",\n      \"shortName\": \"Pac-12\",\n      \"groupId\": \"9\",\n      \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa_conf/500/pac12.png\",\n      \"teams\": []\n    },\n    {\n      \"id\": \"23\",\n      \"name\": \"Southeastern Conference\",\n      \"shortName\": \"SEC\",\n      \"groupId\": \"8\",\n      \"logo\": \"https://a.espncdn.com/i/teamlogos/ncaa_conf/500/sec.png\",\n      \"teams\": []\n    }\n  ]\n}\n</code></pre>"},{"location":"espn-api-reference/#limitations","title":"API Limitations and Considerations","text":"<ol> <li>No official documentation: ESPN does not officially document these APIs</li> <li>Rate limiting: Excessive requests may lead to temporary blocking</li> <li>Inconsistent structures: Response structures can vary across endpoints and seasons</li> <li>Tournament bracket endpoints: Historical tournament bracket data may use different endpoints</li> <li>Base URL variations: Some endpoints use v2 API path, others use v3</li> </ol> <p>API Stability</p> <p>Since these are undocumented APIs, they may change without notice. Always include error handling in your code.</p>"},{"location":"espn-api-reference/#testing","title":"Testing the APIs","text":"<p>To test these APIs effectively:</p> <ol> <li>Rate Limiting: Space out requests to avoid being blocked (1-2 seconds between requests)</li> <li>Postman Collection: Consider creating a Postman collection for easy testing</li> <li>Error Handling: Always implement error handling in your code</li> <li>User Agent: Use a reasonable User-Agent header to identify your application</li> </ol>"},{"location":"espn-api-reference/#critical-parameters","title":"Critical Parameters for Data Completeness","text":"<ol> <li>Scoreboard Endpoint:</li> <li><code>groups=50</code>: CRITICAL parameter to get all Division I games</li> <li><code>limit=200+</code>: Needed during busy days with many games</li> <li> <p>Without these parameters, you'll only get Top 25 or featured games</p> </li> <li> <p>Teams Endpoint:</p> </li> <li>Must iterate through multiple pages (page=1, page=2, etc.)</li> <li> <p>Each page returns 50 teams, but there are 350+ Division I teams</p> </li> <li> <p>Players (Athletes) Endpoint:</p> </li> <li>Use <code>limit=10000</code> to get all 8000+ athletes in one request</li> <li> <p>Otherwise, must paginate through 300+ pages with default limit of 25</p> </li> <li> <p>Statistics Endpoint:</p> </li> <li>Contains ~570 teams</li> <li>Default pagination of 25 teams per page requires iterating through 23 pages</li> </ol>"},{"location":"architecture/","title":"NCAA Basketball Prediction Model Architecture","text":"<ul> <li>NCAA Basketball Prediction Model Architecture<ul> <li>System Overview</li> <li>MVP Focus Areas</li> <li>Data Flow</li> <li>Implementation Technologies</li> <li>Project Structure</li> <li>Key Interfaces</li> <li>Development Phases</li> <li>Related Documentation</li> </ul> </li> </ul>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>The NCAA Basketball Prediction Model follows a medallion architecture designed for data processing, feature engineering, and machine learning:</p> <ul> <li>Bronze Layer: Raw data preserved in its original form</li> <li>Silver Layer: Cleaned, transformed data in normalized structure</li> <li>Gold Layer: Feature-engineered datasets ready for modeling</li> <li>ML Layer: Models, predictions, and evaluation metrics</li> </ul> <pre><code>graph TD\n    DS[ESPN API] --&gt;|Extract| B[Bronze Layer&lt;br&gt;Raw Data]\n    B --&gt;|Transform| S[Silver Layer&lt;br&gt;Processed Data]\n    S --&gt;|Feature Engineering| G[Gold Layer&lt;br&gt;Feature Sets]\n    G --&gt;|Train/Evaluate| ML[ML Models]\n    ML --&gt;|Generate| P[Predictions]\n\n    style B fill:#cd7f32,color:white\n    style S fill:#c0c0c0,color:black\n    style G fill:#ffd700,color:black\n    style ML fill:#b8e0d2,color:black\n    style P fill:#87ceeb,color:black</code></pre>"},{"location":"architecture/#mvp-focus-areas","title":"MVP Focus Areas","text":"<p>For the initial version, we're focusing on:</p> <ol> <li>Core ESPN Data Sources:</li> <li>Scoreboard data (games, scores, teams)</li> <li>Team statistics</li> <li> <p>Basic player information</p> </li> <li> <p>Essential Features:</p> </li> <li>Team performance metrics (win/loss records, scoring efficiency)</li> <li>Game context (home/away, conference matchups)</li> <li> <p>Historical performance indicators</p> </li> <li> <p>Initial Prediction Models:</p> </li> <li>Game outcome prediction (win/loss)</li> <li>Basic evaluation framework</li> </ol>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<p>The data flows through these processing stages:</p> <ol> <li>ESPN API \u2192 Bronze: Raw data preserved as-is</li> <li>Bronze \u2192 Silver: Data cleaning, validation, and normalization</li> <li>Silver \u2192 Gold: Feature engineering and preparation for modeling</li> <li>Gold \u2192 Models: Training, evaluation, and prediction generation</li> </ol>"},{"location":"architecture/#implementation-technologies","title":"Implementation Technologies","text":"<ul> <li>Storage: DuckDB for all data layers (Bronze, Silver, Gold)</li> <li>Processing: Python, Polars, SQL</li> <li>Modeling: Scikit-learn, PyTorch (later phases)</li> </ul>"},{"location":"architecture/#project-structure","title":"Project Structure","text":"<pre><code>ncaa-prediction-model/\n\u251c\u2500\u2500 config/              # Configuration files\n\u251c\u2500\u2500 data/                # Data directory\n\u2502   \u251c\u2500\u2500 ncaa.duckdb      # Database containing all data layers\n\u2502   \u251c\u2500\u2500 predictions/     # Output predictions\n\u2502   \u2514\u2500\u2500 models/          # Trained models\n\u251c\u2500\u2500 src/                 # Source code\n\u2502   \u251c\u2500\u2500 ingest/          # Data ingestion (Bronze)\n\u2502   \u251c\u2500\u2500 process/         # Data processing (Silver)\n\u2502   \u251c\u2500\u2500 features/        # Feature engineering (Gold)\n\u2502   \u251c\u2500\u2500 models/          # ML models\n\u2502   \u2514\u2500\u2500 utils/           # Utilities\n\u251c\u2500\u2500 run.py               # Command-line interface\n\u2514\u2500\u2500 tests/               # Test suite\n</code></pre>"},{"location":"architecture/#key-interfaces","title":"Key Interfaces","text":"<ol> <li>Data Ingestion: ESPN API client for data collection</li> <li>Data Processing: Transform functions for each entity type</li> <li>Feature Engineering: Feature generation for model consumption</li> <li>Model Interface: Training, evaluation, and prediction functions</li> </ol>"},{"location":"architecture/#development-phases","title":"Development Phases","text":"<p>See Development Phases for the project roadmap, which follows this progression:</p> <ol> <li>MVP: Basic pipeline and initial prediction capability</li> <li>Phase 2: Additional data sources and enhanced features</li> <li>Phase 3: Advanced analytics and expanded model types</li> </ol>"},{"location":"architecture/#related-documentation","title":"Related Documentation","text":"<ul> <li>Data Pipeline: Data ingestion and processing details</li> <li>Data Entities: Entity structure and relationships</li> <li>Data Directory Structure: Organization of data files</li> <li>Configuration Management: Configuration approach</li> <li>CLI Design: Command-line interface design</li> <li>Logging Strategy: Logging approach</li> <li>Development Phases: Project roadmap</li> </ul>"},{"location":"architecture/cli-design/","title":"Command-Line Interface Design","text":"<ul> <li>Command-Line Interface Design<ul> <li>Command Structure</li> <li>Implementation Details</li> <li>Code Organization</li> <li>Command Categories<ul> <li>1. Data Ingestion Commands</li> <li>2. Data Processing Commands</li> <li>3. Feature Engineering Commands</li> <li>4. Model Commands</li> <li>5. Utility Commands</li> </ul> </li> <li>Common Option Patterns</li> <li>Consistent Return Values</li> <li>Documentation</li> <li>Testing Commands</li> </ul> </li> </ul> <p>This document outlines the command-line interface design for the NCAA Basketball Prediction Model, providing a consistent and intuitive way to interact with the application's functionality.</p>"},{"location":"architecture/cli-design/#command-structure","title":"Command Structure","text":"<p>The NCAA Basketball Prediction Model uses a simple Python script (<code>run.py</code>) at the project root for all operations. Commands follow a hierarchical structure with this pattern:</p> <pre><code>python run.py &lt;command&gt; &lt;subcommand&gt; [options]\n</code></pre> <p>Where: - <code>&lt;command&gt;</code> is the primary operation category - <code>&lt;subcommand&gt;</code> is the specific operation - <code>[options]</code> are optional flags and parameters</p>"},{"location":"architecture/cli-design/#implementation-details","title":"Implementation Details","text":"<p>The command interface is implemented using Click, which provides:</p> <ol> <li>Composability: Easy to compose complex command hierarchies</li> <li>Type Safety: Automatic type conversion and validation </li> <li>Self-Documentation: Automatic help text generation</li> <li>Testability: Easy to test commands</li> </ol> <p>The main script (<code>run.py</code>) handles: - Command-line argument parsing - Loading configuration - Setting up logging - Executing the appropriate functionality - Error handling and exit codes</p>"},{"location":"architecture/cli-design/#code-organization","title":"Code Organization","text":"<p>The CLI implementation follows this structure:</p> <pre><code>ncaa-prediction-model/\n\u251c\u2500\u2500 run.py                 # Main CLI entry point\n\u2514\u2500\u2500 src/                   # Source code\n    \u251c\u2500\u2500 ingest/            # Data ingestion commands\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 scoreboard.py  # Scoreboard ingestion implementation\n    \u2502   \u2514\u2500\u2500 teams.py       # Teams ingestion implementation\n    \u251c\u2500\u2500 process/           # Data processing commands\n    \u251c\u2500\u2500 features/          # Feature engineering commands \n    \u251c\u2500\u2500 models/            # Model training/prediction commands\n    \u2514\u2500\u2500 utils/             # Shared utilities\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 config.py      # Configuration management\n        \u2514\u2500\u2500 logging.py     # Logging setup\n</code></pre> <p>The <code>run.py</code> script imports functionality directly from the modules in <code>src/</code>:</p> <pre><code># Example import in run.py\nfrom utils.config import get_config\nfrom utils.logging import configure_logging\nfrom ingest.scoreboard import ingest_scoreboard\n</code></pre>"},{"location":"architecture/cli-design/#command-categories","title":"Command Categories","text":""},{"location":"architecture/cli-design/#1-data-ingestion-commands","title":"1. Data Ingestion Commands","text":"<p>Commands for fetching data from external sources:</p> <pre><code>python run.py ingest scoreboard [--date YYYY-MM-DD] [--seasons YYYY-YY]\npython run.py ingest teams [--conference CONF] [--seasons YYYY-YY]\npython run.py ingest games [--team-id TEAM_ID] [--seasons YYYY-YY]\n</code></pre>"},{"location":"architecture/cli-design/#2-data-processing-commands","title":"2. Data Processing Commands","text":"<p>Commands for transforming data through the medallion layers:</p> <pre><code>python run.py process bronze-to-silver --entity ENTITY [--incremental]\npython run.py process silver-to-gold --feature-set FEATURE_SET [--incremental]\n</code></pre>"},{"location":"architecture/cli-design/#3-feature-engineering-commands","title":"3. Feature Engineering Commands","text":"<p>Commands for generating and managing features:</p> <pre><code>python run.py features generate --feature-set FEATURE_SET\npython run.py features list [--entity ENTITY]\npython run.py features analyze --feature FEATURE [--plot]\n</code></pre>"},{"location":"architecture/cli-design/#4-model-commands","title":"4. Model Commands","text":"<p>Commands for training, evaluating, and using models:</p> <pre><code>python run.py model train --model-type MODEL_TYPE --feature-set FEATURE_SET\npython run.py model evaluate --model-id MODEL_ID [--test-set TEST_SET]\npython run.py model predict --model-id MODEL_ID [--upcoming] [--date YYYY-MM-DD]\n</code></pre>"},{"location":"architecture/cli-design/#5-utility-commands","title":"5. Utility Commands","text":"<p>Commands for system maintenance and information:</p> <pre><code>python run.py utils info [--verbose]\npython run.py utils cleanup [--older-than DAYS]\npython run.py utils validate [--config] [--data]\n</code></pre>"},{"location":"architecture/cli-design/#common-option-patterns","title":"Common Option Patterns","text":"<p>The interface uses consistent option patterns:</p> <ol> <li>Date Options: <code>--date YYYY-MM-DD</code> for date-specific operations</li> <li>Range Options: <code>--start-date YYYY-MM-DD --end-date YYYY-MM-DD</code> for date ranges</li> <li>Filter Options: <code>--entity</code>, <code>--conference</code>, etc. for filtering</li> <li>Output Options: <code>--format [json|csv|table]</code> for output formatting</li> <li>Behavioral Options: <code>--verbose</code>, <code>--dry-run</code>, <code>--force</code> for behavior modification</li> </ol>"},{"location":"architecture/cli-design/#consistent-return-values","title":"Consistent Return Values","text":"<p>Commands follow consistent exit code patterns:</p> <ul> <li><code>0</code>: Success</li> <li><code>1</code>: User error (bad input, etc.)</li> <li><code>2</code>: System error (IO error, network error, etc.)</li> </ul>"},{"location":"architecture/cli-design/#documentation","title":"Documentation","text":"<p>Help text is automatically generated from docstrings and option descriptions:</p> <pre><code>$ python run.py --help\nUsage: run.py [OPTIONS] COMMAND [ARGS]...\n\n  NCAA Basketball Prediction Model.\n\n  Run commands for data ingestion, processing, model training, and more.\n\nOptions:\n  --log-level TEXT      Override logging level\n  --config-dir TEXT     Configuration directory\n  --help                Show this message and exit.\n\nCommands:\n  features  Commands for feature engineering.\n  ingest    Commands for data ingestion.\n  model     Commands for model operations.\n  process   Commands for data processing.\n  utils     Utility commands.\n</code></pre> <p>More detailed help is available for each command and subcommand:</p> <pre><code>$ python run.py ingest scoreboard --help\nUsage: run.py ingest scoreboard [OPTIONS]\n\n  Ingest scoreboard data from ESPN API.\n\nOptions:\n  --date [%Y-%m-%d]  Date to fetch scoreboard data for (YYYY-MM-DD)\n  --seasons TEXT     Comma-separated list of seasons (YYYY-YY)\n  --help             Show this message and exit.\n</code></pre>"},{"location":"architecture/cli-design/#testing-commands","title":"Testing Commands","text":"<p>Commands can be tested using Click's testing utilities:</p> <pre><code>from click.testing import CliRunner\nfrom run import cli\n\ndef test_scoreboard_ingestion():\n    runner = CliRunner()\n    result = runner.invoke(cli, [\"ingest\", \"scoreboard\", \"--date\", \"2023-03-15\"])\n    assert result.exit_code == 0\n    assert \"Scoreboard ingestion completed successfully\" in result.output\n</code></pre>"},{"location":"architecture/configuration-management/","title":"Configuration Management","text":"<p>This document outlines the approach to configuration management in the NCAA Basketball Prediction Model, ensuring a consistent and flexible way to handle settings without hardcoding values.</p>"},{"location":"architecture/configuration-management/#configuration-principles","title":"Configuration Principles","text":"<ol> <li>Separation of Concerns: Configuration is separated from code</li> <li>Environment Awareness: Different settings for different environments</li> <li>Minimal Redundancy: Each setting defined in exactly one place</li> <li>Appropriate Defaults: Sensible defaults where possible</li> <li>Type Safety: Configuration values have explicit types and validation</li> </ol>"},{"location":"architecture/configuration-management/#configuration-sources","title":"Configuration Sources","text":"<p>Configuration is loaded from these sources in order of precedence (highest to lowest):</p> <ol> <li>Environment Variables: For sensitive data and deployment-specific settings</li> <li>Command Line Arguments: For runtime overrides</li> <li>Configuration Files: For default and shared settings</li> <li>Code Defaults: As fallbacks where appropriate</li> </ol>"},{"location":"architecture/configuration-management/#configuration-structure","title":"Configuration Structure","text":""},{"location":"architecture/configuration-management/#yaml-configuration-files","title":"YAML Configuration Files","text":"<p>Configuration files are stored in the <code>config/</code> directory using YAML format:</p> <pre><code># config/data_sources.yaml\nespn_api:\n  base_url: \"https://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball\"\n  endpoints:\n    teams: \"/teams\"\n    team_detail: \"/teams/{team_id}\"\n    scoreboard: \"/scoreboard\"\n  request_delay: 1.0  # seconds between requests\n  max_retries: 3\n  timeout: 10.0  # seconds\n\n# config/processing.yaml\ndata_paths:\n  bronze: \"data/bronze\"\n  silver: \"data/silver\"\n  gold: \"data/gold\"\n  models: \"models\"\n\nbatch_size: 100\nworkers: 4\n\n# config/logging.yaml\nlogging:\n  level: \"INFO\"\n  file: \"logs/app.log\"\n  json_format: false\n</code></pre>"},{"location":"architecture/configuration-management/#environment-variables","title":"Environment Variables","text":"<p>Environment variables override configuration file values using this pattern:</p> <ul> <li><code>NCAA_</code> prefix for all project variables</li> <li>Upper case with underscores</li> <li>Double underscore for nested values</li> </ul> <p>Examples: - <code>NCAA_ESPN_API_REQUEST_DELAY=2.0</code> - <code>NCAA_DATA_PATHS__BRONZE=/mnt/data/bronze</code> - <code>NCAA_LOGGING__LEVEL=DEBUG</code></p>"},{"location":"architecture/configuration-management/#configuration-manager","title":"Configuration Manager","text":"<p>A centralized ConfigManager handles loading and accessing configuration:</p> <pre><code>from pathlib import Path\nfrom typing import Any, Dict, Optional, Union\nimport os\nimport yaml\nfrom pydantic import BaseModel\n\nclass EspnApiConfig(BaseModel):\n    base_url: str\n    endpoints: Dict[str, str]\n    request_delay: float\n    max_retries: int\n    timeout: float\n\nclass DataPathsConfig(BaseModel):\n    bronze: str\n    silver: str\n    gold: str\n    models: str\n\nclass LoggingConfig(BaseModel):\n    level: str\n    file: Optional[str] = None\n    json_format: bool = False\n\nclass AppConfig(BaseModel):\n    espn_api: EspnApiConfig\n    data_paths: DataPathsConfig\n    logging: LoggingConfig\n    batch_size: int = 100\n    workers: int = 4\n\nclass ConfigManager:\n    \"\"\"Manages application configuration from multiple sources.\"\"\"\n\n    def __init__(self, config_dir: Union[str, Path] = \"config\"):\n        self.config_dir = Path(config_dir)\n        self._config: Optional[AppConfig] = None\n\n    def load_config(self) -&gt; AppConfig:\n        \"\"\"Load configuration from files and environment variables.\"\"\"\n        if self._config is not None:\n            return self._config\n\n        # Load configuration files\n        config_data = {}\n        for config_file in self.config_dir.glob(\"*.yaml\"):\n            with open(config_file, \"r\") as f:\n                # Use filename without extension as the top-level key\n                key = config_file.stem\n                config_data[key] = yaml.safe_load(f)\n\n        # Flatten the dictionary for easier environment variable override\n        flat_config = self._flatten_dict(config_data)\n\n        # Override with environment variables\n        for key, value in os.environ.items():\n            if key.startswith(\"NCAA_\"):\n                # Convert from environment variable format to config key\n                config_key = key[5:].lower().replace(\"__\", \".\")  # Remove NCAA_ prefix\n                flat_config[config_key] = self._convert_value_type(value, flat_config.get(config_key))\n\n        # Unflatten back to nested structure\n        config_dict = self._unflatten_dict(flat_config)\n\n        # Create validated config object\n        self._config = AppConfig(**config_dict)\n        return self._config\n\n    @property\n    def config(self) -&gt; AppConfig:\n        \"\"\"Get the current configuration, loading it if necessary.\"\"\"\n        if self._config is None:\n            return self.load_config()\n        return self._config\n\n    def _flatten_dict(self, d: Dict[str, Any], parent_key: str = \"\", sep: str = \".\") -&gt; Dict[str, Any]:\n        \"\"\"Flatten nested dictionaries with keys joined by separator.\"\"\"\n        items = []\n        for k, v in d.items():\n            new_key = f\"{parent_key}{sep}{k}\" if parent_key else k\n            if isinstance(v, dict):\n                items.extend(self._flatten_dict(v, new_key, sep=sep).items())\n            else:\n                items.append((new_key, v))\n        return dict(items)\n\n    def _unflatten_dict(self, d: Dict[str, Any], sep: str = \".\") -&gt; Dict[str, Any]:\n        \"\"\"Unflatten dictionary with keys split by separator.\"\"\"\n        result = {}\n        for key, value in d.items():\n            parts = key.split(sep)\n            curr = result\n            for part in parts[:-1]:\n                if part not in curr:\n                    curr[part] = {}\n                curr = curr[part]\n            curr[parts[-1]] = value\n        return result\n\n    def _convert_value_type(self, value: str, reference_value: Any) -&gt; Any:\n        \"\"\"Convert string value to appropriate type based on reference value.\"\"\"\n        if reference_value is None:\n            return value\n\n        if isinstance(reference_value, bool):\n            return value.lower() in (\"true\", \"yes\", \"1\", \"t\", \"y\")\n        elif isinstance(reference_value, int):\n            return int(value)\n        elif isinstance(reference_value, float):\n            return float(value)\n        elif isinstance(reference_value, list):\n            return value.split(\",\")\n        return value\n</code></pre>"},{"location":"architecture/configuration-management/#usage-patterns","title":"Usage Patterns","text":""},{"location":"architecture/configuration-management/#global-configuration-access","title":"Global Configuration Access","text":"<p>The ConfigManager is initialized once at application startup and provides a singleton for accessing config:</p> <pre><code># src/utils/config.py\n\nfrom pathlib import Path\nfrom typing import Optional\n\n# ConfigManager class definition (as above)...\n\n# Singleton instance\n_config_manager: Optional[ConfigManager] = None\n\ndef get_config_manager(config_dir: str = \"config\") -&gt; ConfigManager:\n    \"\"\"Get the singleton ConfigManager instance.\"\"\"\n    global _config_manager\n    if _config_manager is None:\n        _config_manager = ConfigManager(config_dir)\n    return _config_manager\n\ndef get_config():\n    \"\"\"Get the current application configuration.\"\"\"\n    return get_config_manager().config\n</code></pre>"},{"location":"architecture/configuration-management/#using-configuration-in-code","title":"Using Configuration in Code","text":"<p>Import the configuration in modules where needed:</p> <pre><code>from utils.config import get_config\n\ndef fetch_team_data(team_id: str):\n    config = get_config()\n    base_url = config.espn_api.base_url\n    endpoint = config.espn_api.endpoints[\"team_detail\"].format(team_id=team_id)\n    url = f\"{base_url}{endpoint}\"\n\n    # Use other config values\n    timeout = config.espn_api.timeout\n    max_retries = config.espn_api.max_retries\n\n    # Implementation...\n</code></pre>"},{"location":"architecture/configuration-management/#command-line-overrides","title":"Command Line Overrides","text":"<p>CLI arguments can override configuration values:</p> <pre><code>import argparse\nfrom utils.config import get_config_manager\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--batch-size\", type=int, help=\"Batch size for processing\")\n    parser.add_argument(\"--workers\", type=int, help=\"Number of worker processes\")\n    args = parser.parse_args()\n\n    # Load baseline config\n    config_manager = get_config_manager()\n    config = config_manager.load_config()\n\n    # Override with command line arguments if provided\n    if args.batch_size is not None:\n        config.batch_size = args.batch_size\n    if args.workers is not None:\n        config.workers = args.workers\n</code></pre>"},{"location":"architecture/configuration-management/#configuration-management-best-practices","title":"Configuration Management Best Practices","text":"<ol> <li>Never Hardcode Values: Always use the configuration system for settings</li> <li>Use Typed Validation: Ensure configuration values have correct types</li> <li>Document Each Setting: Comment each configuration setting in YAML files</li> <li>Namespace Environment Variables: Use the <code>NCAA_</code> prefix to avoid conflicts</li> <li>Provide Defaults: Include sensible defaults for most settings</li> <li>Keep Sensitive Data Separate: Use environment variables for API keys, etc.</li> <li>Test With Different Configurations: Ensure the application works with various settings </li> </ol>"},{"location":"architecture/data-directory-structure/","title":"Data Directory Structure","text":"<ul> <li>Data Directory Structure<ul> <li>Overview</li> <li>Directory Structure</li> <li>Key Components<ul> <li>1. Bronze Layer (Raw Data)</li> <li>2. Metadata Registry</li> <li>3. Silver and Gold Layers</li> <li>4. Predictions and Models</li> </ul> </li> <li>Storage Efficiency</li> <li>Access Patterns<ul> <li>Accessing Bronze Layer Data</li> <li>Working with Silver Layer</li> </ul> </li> <li>Data Pipeline Flow</li> <li>Backup Strategy</li> </ul> </li> </ul>"},{"location":"architecture/data-directory-structure/#overview","title":"Overview","text":"<p>This document outlines the organization of the data directory in the NCAA Basketball Analytics project. The approach uses DuckDB for all data layers (bronze, silver, and gold), maintaining medallion architecture principles with optimized storage efficiency.</p> <pre><code>flowchart TD\n    D[/data/] --&gt; DB[(ncaa.duckdb)]\n    D --&gt; P[/predictions/]\n    D --&gt; MD[/models/]\n\n    DB --&gt; B[Bronze Layer Tables]\n    DB --&gt; S[Silver Layer Tables]\n    DB --&gt; G[Gold Layer Tables]\n    DB --&gt; MT[Metadata Tables]\n\n    style B fill:#cd7f32,color:white\n    style S fill:#c0c0c0,color:black\n    style G fill:#ffd700,color:black\n    style MT fill:#8a2be2,color:white</code></pre>"},{"location":"architecture/data-directory-structure/#directory-structure","title":"Directory Structure","text":"<pre><code>ncaa-prediction-model/\n\u2514\u2500\u2500 data/\n    \u251c\u2500\u2500 ncaa.duckdb            # DuckDB database containing all data layers\n    \u2502\n    \u251c\u2500\u2500 predictions/           # Output prediction files\n    \u2502   \u2514\u2500\u2500 YYYY-MM-DD/        # Organized by prediction date\n    \u2502\n    \u2514\u2500\u2500 models/                # Trained ML models\n        \u2514\u2500\u2500 model_name/        # Organized by model type\n            \u2514\u2500\u2500 version/       # Version-controlled model files\n</code></pre>"},{"location":"architecture/data-directory-structure/#key-components","title":"Key Components","text":""},{"location":"architecture/data-directory-structure/#1-bronze-layer-raw-data","title":"1. Bronze Layer (Raw Data)","text":"<p>The bronze layer preserves raw API data in DuckDB tables with original JSON content:</p> <ul> <li>Table Naming: Tables follow <code>bronze_{api_endpoint_name}</code> pattern</li> <li>Data Preservation: Original JSON stored in a <code>raw_data</code> column</li> <li>Metadata Columns: Each table includes ingestion timestamps, content hashes, and source information</li> <li>Incremental Loading: New data is appended to existing tables with appropriate tracking</li> </ul> <p>Example schema for bronze layer tables:</p> <pre><code>CREATE TABLE bronze_scoreboard (\n    id INTEGER PRIMARY KEY,\n    date STRING,\n    ingestion_timestamp TIMESTAMP,\n    source_type STRING,\n    content_hash STRING, -- For change detection\n    raw_data STRING      -- Original JSON response\n);\n\nCREATE TABLE bronze_teams (\n    id INTEGER PRIMARY KEY,\n    team_id STRING,\n    ingestion_timestamp TIMESTAMP,\n    content_hash STRING,\n    raw_data STRING\n);\n</code></pre>"},{"location":"architecture/data-directory-structure/#2-metadata-registry","title":"2. Metadata Registry","text":"<p>The DuckDB database contains metadata tables for tracking data lineage:</p>"},{"location":"architecture/data-directory-structure/#metadata-tables","title":"Metadata Tables","text":"<ul> <li>source_metadata: Information about raw data sources</li> <li>Links source ID to raw data and tracking information </li> <li>Tracks content hashes, ingestion timestamps, and processing status</li> <li>silver_dependencies: Lineage from bronze to silver</li> <li>gold_dependencies: Lineage from silver to gold</li> <li>model_dependencies: Lineage from gold to models</li> <li>job_history: Processing job execution history</li> <li>change_detection: Change tracking for incremental processing</li> </ul>"},{"location":"architecture/data-directory-structure/#3-silver-and-gold-layers","title":"3. Silver and Gold Layers","text":"<p>The same DuckDB database contains normalized and feature-engineered tables:</p>"},{"location":"architecture/data-directory-structure/#silver-layer-tables","title":"Silver Layer Tables","text":"<p>Normalized entity tables derived from bronze data:</p> <ul> <li>Table Naming: Tables follow <code>silver_{entity_name}</code> pattern</li> <li>seasons: NCAA basketball seasons with dates and phases</li> <li>teams: Team information and metadata</li> <li>players: Player roster information</li> <li>games: Game events, results, and context</li> <li>statistics: Game and season statistics</li> <li>venues: Game locations</li> <li>conferences: Conference information</li> <li>rankings: Team rankings by poll</li> </ul>"},{"location":"architecture/data-directory-structure/#gold-layer-tables","title":"Gold Layer Tables","text":"<p>Feature-engineered tables derived from silver layer entities:</p> <ul> <li>Table Naming: Tables follow <code>gold_{feature_set_name}</code> pattern</li> <li>team_performance: Team level statistics, trends, and metrics</li> <li>player_performance: Player level statistics and metrics</li> <li>game_context: Game situation features (home/away, rest days, etc.)</li> <li>historical_performance: Historical matchups and outcomes</li> <li>prediction_features: Combined feature sets ready for model consumption</li> </ul>"},{"location":"architecture/data-directory-structure/#4-predictions-and-models","title":"4. Predictions and Models","text":"<p>The remaining directories store prediction outputs and trained models:</p> <ul> <li>predictions/: Organized by prediction date</li> <li>models/: Organized by model type and version</li> </ul>"},{"location":"architecture/data-directory-structure/#storage-efficiency","title":"Storage Efficiency","text":"<p>Using DuckDB provides significant advantages:</p> <ol> <li>Single File: All data stored in a single database file</li> <li>Columnar Storage: Efficient storage and query performance</li> <li>SQL Interface: Standard SQL access to all data layers</li> <li>Compression: Automatic data compression for storage efficiency</li> <li>Integration: Direct integration with Pandas, Polars, and other analytics libraries</li> </ol>"},{"location":"architecture/data-directory-structure/#access-patterns","title":"Access Patterns","text":"<p>Common data access patterns with DuckDB:</p>"},{"location":"architecture/data-directory-structure/#accessing-bronze-layer-data","title":"Accessing Bronze Layer Data","text":"<pre><code>def read_scoreboard_data(date):\n    \"\"\"Read scoreboard data for a specific date.\"\"\"\n    with duckdb.connect(\"data/ncaa.duckdb\") as conn:\n        query = \"\"\"\n            SELECT raw_data\n            FROM bronze_scoreboard\n            WHERE date = ?\n            ORDER BY ingestion_timestamp DESC\n            LIMIT 1\n        \"\"\"\n        result = conn.execute(query, [date]).fetchone()\n\n        if result:\n            # Parse the raw_data JSON\n            return json.loads(result[0])\n        else:\n            return None\n</code></pre>"},{"location":"architecture/data-directory-structure/#working-with-silver-layer","title":"Working with Silver Layer","text":"<pre><code>def get_team_games(team_id, season):\n    \"\"\"Get all games for a team in a season.\"\"\"\n    with duckdb.connect(\"data/ncaa.duckdb\") as conn:\n        return conn.execute(\"\"\"\n            SELECT * FROM silver_games\n            WHERE (home_team_id = ? OR away_team_id = ?)\n            AND season_id = ?\n            ORDER BY game_date\n        \"\"\", [team_id, team_id, season]).fetchdf()\n</code></pre>"},{"location":"architecture/data-directory-structure/#data-pipeline-flow","title":"Data Pipeline Flow","text":"<p>The data pipeline follows this flow within the DuckDB database:</p> <ol> <li>Ingestion:</li> <li>Fetch data from ESPN APIs</li> <li>Store in bronze layer tables with appropriate metadata</li> <li> <p>Update metadata registry</p> </li> <li> <p>Processing:</p> </li> <li>Transform bronze layer data into silver layer normalized tables</li> <li> <p>Update lineage tracking</p> </li> <li> <p>Feature Engineering:</p> </li> <li>Create features from silver tables</li> <li>Store as gold layer tables</li> <li> <p>Update feature dependencies</p> </li> <li> <p>Analysis &amp; Prediction:</p> </li> <li>Use gold layer tables for model training</li> <li>Generate predictions</li> <li>Store models and predictions in respective directories</li> </ol>"},{"location":"architecture/data-directory-structure/#backup-strategy","title":"Backup Strategy","text":"<p>The recommended backup strategy:</p> <ol> <li>Bronze Layer: Regular filesystem backups of Parquet files (incremental)</li> <li>DuckDB Database:</li> <li>Regular database dumps using DuckDB's export functionality</li> <li>Consider WAL-based backup for more frequent recovery points</li> <li>Models &amp; Predictions: Version control or filesystem backups</li> </ol>"},{"location":"architecture/data-entities/","title":"Data Entities","text":"<ul> <li>Data Entities<ul> <li>Entity Relationship Diagram</li> <li>Core Entities<ul> <li>Teams</li> <li>Games</li> <li>Team Statistics</li> <li>Conferences</li> <li>Seasons</li> <li>Venues</li> </ul> </li> <li>Implementation<ul> <li>Example SQL Schema</li> </ul> </li> <li>Data Access Patterns</li> </ul> </li> </ul> <p>This document describes the core data entities in the NCAA Basketball Prediction Model, focusing on the essential entities needed for the MVP.</p>"},{"location":"architecture/data-entities/#entity-relationship-diagram","title":"Entity Relationship Diagram","text":"<p>The following diagram shows the relationships between the core entities:</p> <pre><code>erDiagram\n    SEASONS ||--o{ GAMES : contains\n    CONFERENCES ||--o{ TEAMS : groups\n    TEAMS ||--|{ TEAM_STATS : produces\n    GAMES }|--|| VENUES : located_at\n    TEAMS }o--o{ GAMES : participate_in</code></pre>"},{"location":"architecture/data-entities/#core-entities","title":"Core Entities","text":""},{"location":"architecture/data-entities/#teams","title":"Teams","text":"<p>The Teams entity represents college basketball teams with their basic information.</p>"},{"location":"architecture/data-entities/#structure","title":"Structure","text":"Field Type Description team_id string Unique identifier for the team (from ESPN) name string Full team name abbreviation string Team abbreviation location string Team location conference_id string Conference identifier logo_url string URL to team logo color string Primary team color alternate_color string Secondary team color"},{"location":"architecture/data-entities/#example","title":"Example","text":"<pre><code>{\n  \"team_id\": \"150\",\n  \"name\": \"Duke Blue Devils\",\n  \"abbreviation\": \"DUKE\",\n  \"location\": \"Durham\",\n  \"conference_id\": \"2\",\n  \"logo_url\": \"https://a.espncdn.com/i/teamlogos/ncaa/500/150.png\",\n  \"color\": \"#001A57\",\n  \"alternate_color\": \"#FFFFFF\"\n}\n</code></pre>"},{"location":"architecture/data-entities/#games","title":"Games","text":"<p>The Games entity represents basketball games, including schedule and score information.</p>"},{"location":"architecture/data-entities/#structure_1","title":"Structure","text":"Field Type Description game_id string Unique identifier for the game (from ESPN) season_id string Season identifier (e.g., \"2022-23\") season_type integer Season type (1=regular season, 2=conference tourney, 3=NCAA tournament) date datetime Date and time of the game home_team_id string Home team identifier away_team_id string Away team identifier venue_id string Venue identifier home_score integer Home team score (null if not played) away_score integer Away team score (null if not played) status string Game status (scheduled, in_progress, final) neutral_site boolean Whether game is played at a neutral site conference_game boolean Whether this is a conference game"},{"location":"architecture/data-entities/#example_1","title":"Example","text":"<pre><code>{\n  \"game_id\": \"401468245\",\n  \"season_id\": \"2022-23\",\n  \"season_type\": 1,\n  \"date\": \"2023-01-14T19:00:00Z\",\n  \"home_team_id\": \"150\",\n  \"away_team_id\": \"152\",\n  \"venue_id\": \"3677\",\n  \"home_score\": 68,\n  \"away_score\": 63,\n  \"status\": \"final\",\n  \"neutral_site\": false,\n  \"conference_game\": true\n}\n</code></pre>"},{"location":"architecture/data-entities/#team-statistics","title":"Team Statistics","text":"<p>The Team Statistics entity captures team performance metrics for games.</p>"},{"location":"architecture/data-entities/#structure_2","title":"Structure","text":"Field Type Description team_id string Team identifier game_id string Game identifier season_id string Season identifier points integer Total points scored field_goals_made integer Field goals made field_goals_attempted integer Field goals attempted field_goal_pct float Field goal percentage three_point_made integer Three-point shots made three_point_attempted integer Three-point shots attempted three_point_pct float Three-point percentage free_throws_made integer Free throws made free_throws_attempted integer Free throws attempted free_throw_pct float Free throw percentage rebounds integer Total rebounds offensive_rebounds integer Offensive rebounds defensive_rebounds integer Defensive rebounds assists integer Total assists steals integer Total steals blocks integer Total blocks turnovers integer Total turnovers fouls integer Total fouls"},{"location":"architecture/data-entities/#conferences","title":"Conferences","text":"<p>The Conferences entity represents college basketball conferences.</p>"},{"location":"architecture/data-entities/#structure_3","title":"Structure","text":"Field Type Description conference_id string Unique identifier for the conference name string Conference name short_name string Conference short name/abbreviation logo_url string URL to conference logo"},{"location":"architecture/data-entities/#seasons","title":"Seasons","text":"<p>The Seasons entity tracks NCAA basketball seasons.</p>"},{"location":"architecture/data-entities/#structure_4","title":"Structure","text":"Field Type Description season_id string Unique identifier for the season (e.g., \"2022-23\") name string Season name start_date date Season start date end_date date Season end date year integer Season year (e.g., 2023 for 2022-23 season)"},{"location":"architecture/data-entities/#venues","title":"Venues","text":"<p>The Venues entity represents locations where games are played.</p>"},{"location":"architecture/data-entities/#structure_5","title":"Structure","text":"Field Type Description venue_id string Unique identifier for the venue name string Venue name capacity integer Venue capacity city string City name state string State abbreviation country string Country"},{"location":"architecture/data-entities/#implementation","title":"Implementation","text":"<p>These entities are implemented as tables in DuckDB with appropriate data types and relationships in the silver layer, following the <code>silver_{entity_name}</code> naming convention.</p>"},{"location":"architecture/data-entities/#example-sql-schema","title":"Example SQL Schema","text":"<pre><code>-- Teams table\nCREATE TABLE silver_teams (\n    team_id VARCHAR PRIMARY KEY,\n    name VARCHAR NOT NULL,\n    abbreviation VARCHAR,\n    location VARCHAR,\n    conference_id VARCHAR REFERENCES silver_conferences(conference_id),\n    logo_url VARCHAR,\n    color VARCHAR,\n    alternate_color VARCHAR\n);\n\n-- Games table\nCREATE TABLE silver_games (\n    game_id VARCHAR PRIMARY KEY,\n    season_id VARCHAR REFERENCES silver_seasons(season_id),\n    season_type INTEGER,\n    date TIMESTAMP NOT NULL,\n    home_team_id VARCHAR REFERENCES silver_teams(team_id),\n    away_team_id VARCHAR REFERENCES silver_teams(team_id),\n    venue_id VARCHAR REFERENCES silver_venues(venue_id),\n    home_score INTEGER,\n    away_score INTEGER,\n    status VARCHAR,\n    neutral_site BOOLEAN,\n    conference_game BOOLEAN\n);\n</code></pre>"},{"location":"architecture/data-entities/#data-access-patterns","title":"Data Access Patterns","text":"<p>For the MVP, the following access patterns are prioritized:</p> <ol> <li>Retrieve team information by ID</li> <li>Get all games for a specific team</li> <li>Get team statistics for a game</li> <li>Get historical matchups between two teams</li> <li>Filter games by date range or season</li> </ol> <p>These patterns inform the database schema design and API implementation.</p>"},{"location":"architecture/data-pipeline/","title":"Data Pipeline","text":"<p>This document describes the data pipeline for the NCAA Basketball Prediction Model, focusing on the MVP implementation.</p>"},{"location":"architecture/data-pipeline/#overview","title":"Overview","text":"<p>The data pipeline follows the medallion architecture pattern with three sequential processing layers:</p> <pre><code>flowchart LR\n    E[ESPN APIs] --&gt;|Extract| B[Bronze Layer]\n    B --&gt;|Transform| S[Silver Layer]\n    S --&gt;|Feature Engineering| G[Gold Layer]\n    G --&gt;|Train| M[ML Models]\n\n    style B fill:#cd7f32,color:white\n    style S fill:#c0c0c0,color:black\n    style G fill:#ffd700,color:black\n    style M fill:#90ee90,color:black</code></pre>"},{"location":"architecture/data-pipeline/#data-sources","title":"Data Sources","text":"<p>The project uses ESPN's undocumented APIs to retrieve NCAA basketball data:</p>"},{"location":"architecture/data-pipeline/#primary-endpoints-mvp","title":"Primary Endpoints (MVP)","text":"<ul> <li>Scoreboard API: Game schedules, scores, and basic game information</li> <li>URL: <code>https://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/scoreboard</code></li> <li> <p>Parameters: <code>dates</code>, <code>groups</code> (conferences), <code>limit</code></p> </li> <li> <p>Teams API: Team information and metadata</p> </li> <li>URL: <code>https://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/teams/{team_id}</code></li> </ul>"},{"location":"architecture/data-pipeline/#request-implementation","title":"Request Implementation","text":"<pre><code>def fetch_scoreboard(date: str, limit: int = 100) -&gt; dict:\n    \"\"\"\n    Fetch scoreboard data for a specific date.\n\n    Args:\n        date: Date in YYYYMMDD format\n        limit: Maximum number of games to return\n\n    Returns:\n        JSON response as dictionary\n    \"\"\"\n    url = \"https://site.api.espn.com/apis/site/v2/sports/basketball/mens-college-basketball/scoreboard\"\n    params = {\n        \"dates\": date,\n        \"limit\": limit\n    }\n\n    response = requests.get(url, params=params)\n    response.raise_for_status()\n\n    return response.json()\n</code></pre>"},{"location":"architecture/data-pipeline/#bronze-layer","title":"Bronze Layer","text":"<p>The Bronze layer preserves raw data from ESPN APIs in its original form.</p>"},{"location":"architecture/data-pipeline/#implementation","title":"Implementation","text":"<ol> <li>Storage Format: DuckDB tables with <code>bronze_{api_endpoint_name}</code> naming convention</li> <li>Data Preservation: Original JSON stored in a <code>raw_data</code> column along with metadata</li> <li>Schema Design:    <pre><code>CREATE TABLE bronze_scoreboard (\n    id INTEGER PRIMARY KEY,\n    date STRING,\n    ingestion_timestamp TIMESTAMP,\n    source_type STRING,\n    content_hash STRING,\n    raw_data STRING\n)\n</code></pre></li> <li>Storage Location: All data stored in a single DuckDB database file in the <code>data</code> directory</li> <li>Metadata Tracking: Additional columns for request parameters, hash values, and lineage tracking</li> </ol>"},{"location":"architecture/data-pipeline/#silver-layer","title":"Silver Layer","text":"<p>The Silver layer transforms raw data into cleaned, normalized structures.</p>"},{"location":"architecture/data-pipeline/#core-entities","title":"Core Entities","text":"<ul> <li>Teams: Team information and metadata</li> <li>Games: Game schedules, scores, and outcomes</li> <li>Seasons: Season definitions and timeframes</li> <li>Conferences: Conference groupings and membership</li> </ul>"},{"location":"architecture/data-pipeline/#implementation_1","title":"Implementation","text":"<ol> <li>Storage Format: DuckDB tables with <code>silver_{entity_name}</code> naming convention</li> <li>Same Database: Silver tables stored in the same DuckDB database as Bronze layer</li> <li>Transformation Process:</li> <li>Parse JSON data from bronze layer tables</li> <li>Apply data type conversions</li> <li>Normalize nested structures</li> <li>Implement data validation</li> <li>Create relationships between entities</li> <li>Data Lineage: Track source records from bronze layer to maintain data provenance</li> </ol>"},{"location":"architecture/data-pipeline/#example-transformation","title":"Example Transformation","text":"<pre><code>def process_games(raw_data: dict) -&gt; List[dict]:\n    \"\"\"\n    Process raw scoreboard data into normalized game records.\n\n    Args:\n        raw_data: Raw JSON data from scoreboard API\n\n    Returns:\n        List of normalized game dictionaries\n    \"\"\"\n    games = []\n\n    for event in raw_data.get(\"events\", []):\n        game_id = event.get(\"id\")\n        competitions = event.get(\"competitions\", [])\n\n        if not competitions:\n            continue\n\n        competition = competitions[0]\n\n        # Extract teams and scores\n        teams_data = {}\n        for competitor in competition.get(\"competitors\", []):\n            is_home = competitor.get(\"homeAway\") == \"home\"\n            team_id = competitor.get(\"team\", {}).get(\"id\")\n            score = competitor.get(\"score\")\n\n            role = \"home\" if is_home else \"away\"\n            teams_data[role] = {\n                \"team_id\": team_id,\n                \"score\": int(score) if score else None\n            }\n\n        # Create normalized game record\n        game = {\n            \"game_id\": game_id,\n            \"date\": event.get(\"date\"),\n            \"status\": competition.get(\"status\", {}).get(\"type\", {}).get(\"name\"),\n            \"home_team_id\": teams_data.get(\"home\", {}).get(\"team_id\"),\n            \"away_team_id\": teams_data.get(\"away\", {}).get(\"team_id\"),\n            \"home_score\": teams_data.get(\"home\", {}).get(\"score\"),\n            \"away_score\": teams_data.get(\"away\", {}).get(\"score\"),\n            \"neutral_site\": competition.get(\"neutralSite\", False),\n            \"conference_game\": competition.get(\"conferenceCompetition\", False)\n        }\n\n        games.append(game)\n\n    return games\n</code></pre>"},{"location":"architecture/data-pipeline/#gold-layer","title":"Gold Layer","text":"<p>The Gold layer generates features for machine learning models.</p>"},{"location":"architecture/data-pipeline/#mvp-features","title":"MVP Features","text":"<ol> <li>Team Performance:</li> <li>Win/loss record (overall, home/away, conference)</li> <li>Scoring averages (points for/against)</li> <li> <p>Recent performance (last 5/10 games)</p> </li> <li> <p>Game Context:</p> </li> <li>Home/away/neutral</li> <li>Days of rest</li> <li>Conference matchup</li> <li>Historical matchup results</li> </ol>"},{"location":"architecture/data-pipeline/#implementation_2","title":"Implementation","text":"<pre><code>def calculate_team_features(team_id: str, games: List[dict]) -&gt; dict:\n    \"\"\"\n    Calculate team performance features from game data.\n\n    Args:\n        team_id: Team identifier\n        games: List of processed game dictionaries\n\n    Returns:\n        Dictionary of team features\n    \"\"\"\n    team_games = [g for g in games if g[\"home_team_id\"] == team_id or g[\"away_team_id\"] == team_id]\n\n    # Calculate overall record\n    wins = 0\n    losses = 0\n    points_for = 0\n    points_against = 0\n\n    for game in team_games:\n        is_home = game[\"home_team_id\"] == team_id\n        team_score = game[\"home_score\"] if is_home else game[\"away_score\"]\n        opponent_score = game[\"away_score\"] if is_home else game[\"home_score\"]\n\n        if team_score &gt; opponent_score:\n            wins += 1\n        elif team_score &lt; opponent_score:\n            losses += 1\n\n        points_for += team_score if team_score else 0\n        points_against += opponent_score if opponent_score else 0\n\n    # Calculate averages\n    games_played = wins + losses\n    if games_played &gt; 0:\n        avg_points_for = points_for / games_played\n        avg_points_against = points_against / games_played\n        win_pct = wins / games_played\n    else:\n        avg_points_for = 0\n        avg_points_against = 0\n        win_pct = 0\n\n    return {\n        \"team_id\": team_id,\n        \"games_played\": games_played,\n        \"wins\": wins,\n        \"losses\": losses,\n        \"win_pct\": win_pct,\n        \"avg_points_for\": avg_points_for,\n        \"avg_points_against\": avg_points_against\n    }\n</code></pre>"},{"location":"architecture/data-pipeline/#data-flow-execution","title":"Data Flow Execution","text":"<p>The data pipeline is executed through a command-line interface with the following steps:</p> <ol> <li> <p>Ingest: Fetch and store raw data    <pre><code>python run.py ingest scoreboard --date 2023-03-01\n</code></pre></p> </li> <li> <p>Process: Transform raw data into silver layer    <pre><code>python run.py process bronze-to-silver --entity games\n</code></pre></p> </li> <li> <p>Features: Generate gold layer features    <pre><code>python run.py features generate --feature-set team_performance\n</code></pre></p> </li> <li> <p>Model: Train and evaluate prediction models    <pre><code>python run.py model train --model-type logistic --feature-set team_performance\n</code></pre></p> </li> </ol>"},{"location":"architecture/data-pipeline/#future-enhancements","title":"Future Enhancements","text":"<p>In later phases, the data pipeline will be expanded to include:</p> <ol> <li>Additional data sources (player statistics, advanced metrics)</li> <li>More sophisticated feature engineering</li> <li>Automated data quality monitoring</li> <li>Incremental processing capabilities</li> <li>Historical data backfilling</li> </ol>"},{"location":"architecture/development-phases/","title":"Development Phases","text":"<ul> <li>Development Phases<ul> <li>Phase 0: Project Setup (1 month)</li> <li>Phase 1: MVP - Basic Prediction Pipeline (2 months)<ul> <li>Focus Areas:</li> </ul> </li> <li>Phase 2: Enhanced Features and Models (2 months)<ul> <li>Enhancements:</li> </ul> </li> <li>Phase 3: Advanced Analytics (3 months)<ul> <li>Advanced Features:</li> </ul> </li> <li>Implementation Priorities</li> <li>MVP Definition</li> </ul> </li> </ul> <p>This document outlines the phased approach for developing the NCAA Basketball Prediction Model, prioritizing a functional MVP before expanding capabilities.</p> <pre><code>gantt\n    title Project Development Timeline\n    dateFormat  YYYY-MM\n    axisFormat %b %Y\n\n    section Setup\n    Phase 0: Project Setup        :setup, 2023-12, 1M\n\n    section MVP\n    Phase 1: MVP Data Pipeline    :mvp, after setup, 2M\n\n    section Expansion\n    Phase 2: Enhanced Features    :expand, after mvp, 2M\n    Phase 3: Advanced Analytics   :advanced, after expand, 3M</code></pre>"},{"location":"architecture/development-phases/#phase-0-project-setup-1-month","title":"Phase 0: Project Setup (1 month)","text":"<p>Goal: Establish project foundation and environment.</p> <p>Key Deliverables: - Repository structure and configuration - Development environment setup - Documentation framework - Initial test infrastructure</p>"},{"location":"architecture/development-phases/#phase-1-mvp-basic-prediction-pipeline-2-months","title":"Phase 1: MVP - Basic Prediction Pipeline (2 months)","text":"<p>Goal: Implement a functioning end-to-end prediction pipeline focusing on game outcomes.</p>"},{"location":"architecture/development-phases/#focus-areas","title":"Focus Areas:","text":""},{"location":"architecture/development-phases/#bronze-layer","title":"Bronze Layer","text":"<ul> <li>ESPN API client for scoreboard and team data</li> <li>Basic data ingestion framework</li> <li>Simple storage of raw JSON data</li> </ul>"},{"location":"architecture/development-phases/#silver-layer","title":"Silver Layer","text":"<ul> <li>Data transformation for games and teams</li> <li>Entity creation for core data structures</li> <li>Basic data validation</li> </ul>"},{"location":"architecture/development-phases/#gold-layer","title":"Gold Layer","text":"<ul> <li>Team performance metrics (win/loss records, scoring)</li> <li>Game context features (home/away, matchup history)</li> <li>Basic statistical indicators</li> </ul>"},{"location":"architecture/development-phases/#ml-layer","title":"ML Layer","text":"<ul> <li>Simple win/loss prediction model</li> <li>Model evaluation framework</li> <li>Initial prediction generation</li> </ul> <p>Success Criteria: End-to-end pipeline that can predict game outcomes with &gt;55% accuracy.</p>"},{"location":"architecture/development-phases/#phase-2-enhanced-features-and-models-2-months","title":"Phase 2: Enhanced Features and Models (2 months)","text":"<p>Goal: Expand data sources and improve prediction accuracy.</p>"},{"location":"architecture/development-phases/#enhancements","title":"Enhancements:","text":""},{"location":"architecture/development-phases/#data-sources","title":"Data Sources","text":"<ul> <li>Additional ESPN API endpoints</li> <li>Historical data expansion</li> <li>Team and player statistics</li> </ul>"},{"location":"architecture/development-phases/#features","title":"Features","text":"<ul> <li>Advanced team metrics</li> <li>Time-series features (momentum, trends)</li> <li>Opponent-specific performance indicators</li> </ul>"},{"location":"architecture/development-phases/#models","title":"Models","text":"<ul> <li>Improved algorithms and hyperparameter tuning</li> <li>Point spread and over/under predictions</li> <li>Model comparison framework</li> </ul> <p>Success Criteria: Prediction accuracy &gt;65% with expanded prediction types.</p>"},{"location":"architecture/development-phases/#phase-3-advanced-analytics-3-months","title":"Phase 3: Advanced Analytics (3 months)","text":"<p>Goal: Incorporate advanced analytics and expand prediction capabilities.</p>"},{"location":"architecture/development-phases/#advanced-features","title":"Advanced Features:","text":""},{"location":"architecture/development-phases/#data-integration","title":"Data Integration","text":"<ul> <li>Player-level statistics</li> <li>Advanced contextual factors</li> <li>External data sources (optional)</li> </ul>"},{"location":"architecture/development-phases/#analytics","title":"Analytics","text":"<ul> <li>Advanced statistical models</li> <li>Deep learning approaches</li> <li>Ensemble methods</li> </ul>"},{"location":"architecture/development-phases/#outputs","title":"Outputs","text":"<ul> <li>Detailed prediction explanations</li> <li>Confidence metrics</li> <li>Interactive results (future consideration)</li> </ul> <p>Success Criteria: Comprehensive prediction system with multiple model types and &gt;70% accuracy.</p>"},{"location":"architecture/development-phases/#implementation-priorities","title":"Implementation Priorities","text":"<p>Each phase follows this implementation sequence:</p> <ol> <li>Data First: Ensure data pipeline is solid before proceeding</li> <li>Testing Always: Maintain test coverage throughout development</li> <li>Simple Before Complex: Start with simpler models before sophistication</li> <li>Working Software: Prioritize working end-to-end solutions over perfect components</li> </ol>"},{"location":"architecture/development-phases/#mvp-definition","title":"MVP Definition","text":"<p>For clarity, our MVP is defined as:</p> <ul> <li>Data ingestion from ESPN APIs for current season games</li> <li>Basic team statistics processing</li> <li>Simple feature engineering focused on win/loss patterns</li> <li>Initial prediction model for game outcomes</li> <li>Command-line interface for running predictions</li> </ul>"},{"location":"architecture/logging-strategy/","title":"Logging Strategy","text":"<ul> <li>Logging Strategy<ul> <li>Logging Framework<ul> <li>Core Benefits</li> </ul> </li> <li>Logger Configuration</li> <li>Usage Patterns<ul> <li>Basic Usage</li> <li>Context Managers</li> </ul> </li> <li>Log Levels</li> <li>Log Organization<ul> <li>Log Storage</li> </ul> </li> <li>Log Analysis</li> <li>Implementation</li> </ul> </li> </ul> <p>This document outlines the logging approach for the NCAA Basketball Prediction Model, ensuring consistent error tracking, diagnostic information, and operational visibility.</p>"},{"location":"architecture/logging-strategy/#logging-framework","title":"Logging Framework","text":"<p>The project uses Python's built-in <code>logging</code> module with structured logging enhancements via the <code>structlog</code> package:</p> <pre><code># Requirements in pyproject.toml\n# structlog&gt;=23.1.0\n# rich&gt;=13.3.5  # For console formatting\n</code></pre>"},{"location":"architecture/logging-strategy/#core-benefits","title":"Core Benefits","text":"<ol> <li>Structured Logging: JSON-formatted logs for easier parsing and analysis</li> <li>Contextual Information: Automatic inclusion of context (module, function, timestamp)</li> <li>Flexible Outputs: Console, file, and potential external integrations</li> <li>Performance: Minimal overhead in production environments</li> </ol>"},{"location":"architecture/logging-strategy/#logger-configuration","title":"Logger Configuration","text":"<p>Logger configuration is centralized in <code>src/utils/logging.py</code> and integrated with the configuration management system:</p> <pre><code>import logging\nimport sys\nfrom typing import Optional, Dict, Any\n\nimport structlog\nfrom rich.console import Console\nfrom rich.logging import RichHandler\nfrom utils.config import get_config\n\nconsole = Console(width=150)\n\ndef configure_logging() -&gt; None:\n    \"\"\"Configure application-wide logging using settings from config system.\"\"\"\n    config = get_config()\n    log_level = config.logging.level\n    json_logs = config.logging.json_format\n    log_file = config.logging.file\n\n    level = getattr(logging, log_level.upper())\n\n    # Processors for structlog\n    processors = [\n        structlog.contextvars.merge_contextvars,\n        structlog.stdlib.add_logger_name,\n        structlog.stdlib.add_log_level,\n        structlog.stdlib.PositionalArgumentsFormatter(),\n        structlog.processors.TimeStamper(fmt=\"iso\"),\n        structlog.processors.StackInfoRenderer(),\n        structlog.processors.format_exc_info,\n    ]\n\n    if json_logs:\n        # JSON formatter for production\n        processors.append(structlog.processors.JSONRenderer())\n    else:\n        # Rich console formatter for development\n        processors.append(structlog.dev.ConsoleRenderer())\n\n    # Configure structlog\n    structlog.configure(\n        processors=processors,\n        logger_factory=structlog.stdlib.LoggerFactory(),\n        wrapper_class=structlog.stdlib.BoundLogger,\n        cache_logger_on_first_use=True,\n    )\n\n    # Configure standard logging\n    handlers = []\n\n    # Console handler with Rich formatting\n    console_handler = RichHandler(\n        console=console,\n        rich_tracebacks=True,\n        markup=True,\n        show_time=False,  # structlog adds timestamps\n    )\n    console_handler.setLevel(level)\n    handlers.append(console_handler)\n\n    # File handler if specified\n    if log_file:\n        file_handler = logging.FileHandler(log_file)\n        file_handler.setLevel(level)\n        handlers.append(file_handler)\n\n    # Root logger configuration\n    logging.basicConfig(\n        level=level,\n        format=\"%(message)s\",\n        handlers=handlers,\n    )\n</code></pre>"},{"location":"architecture/logging-strategy/#usage-patterns","title":"Usage Patterns","text":""},{"location":"architecture/logging-strategy/#basic-usage","title":"Basic Usage","text":"<pre><code>import structlog\n\nlogger = structlog.get_logger(__name__)\n\ndef process_team_data(team_id: str) -&gt; None:\n    logger.info(\"Processing team data\", team_id=team_id)\n    try:\n        # Processing logic\n        pass\n    except Exception as e:\n        logger.exception(\"Failed to process team data\", team_id=team_id)\n        raise\n</code></pre>"},{"location":"architecture/logging-strategy/#context-managers","title":"Context Managers","text":"<p>For operations spanning multiple functions, use context variables:</p> <pre><code>import structlog\nfrom structlog.contextvars import bind_contextvars, clear_contextvars\n\nlogger = structlog.get_logger(__name__)\n\ndef process_pipeline(date: str) -&gt; None:\n    # Bind context that will be included in all log entries\n    bind_contextvars(\n        pipeline=\"ingest\",\n        date=date\n    )\n\n    logger.info(\"Starting pipeline\")\n    try:\n        # Pipeline operations\n        fetch_data(date)\n        process_data()\n        logger.info(\"Pipeline completed successfully\")\n    except Exception:\n        logger.exception(\"Pipeline failed\")\n        raise\n    finally:\n        # Clear context when done\n        clear_contextvars()\n</code></pre>"},{"location":"architecture/logging-strategy/#log-levels","title":"Log Levels","text":"<p>Use appropriate log levels for different types of information:</p> Level Purpose Example DEBUG Detailed diagnostic information <code>logger.debug(\"Parsing response\", data_size=len(data))</code> INFO Confirmation of normal operations <code>logger.info(\"Processed 20 teams\")</code> WARNING Unexpected but non-critical issues <code>logger.warning(\"Rate limit approaching\", remaining=10)</code> ERROR Errors preventing specific operations <code>logger.error(\"Failed to fetch team data\", team_id=123)</code> CRITICAL Critical errors affecting the system <code>logger.critical(\"Database connection failed\")</code>"},{"location":"architecture/logging-strategy/#log-organization","title":"Log Organization","text":"<p>Logs are organized in the following ways:</p> <ol> <li>By Module: Each module has its own logger with the module name</li> <li>By Process: Pipeline processes include context about which pipeline is running</li> <li>By Environment: Different log formats for development (rich console) and production (JSON)</li> </ol>"},{"location":"architecture/logging-strategy/#log-storage","title":"Log Storage","text":"<p>For production deployments:</p> <ul> <li>Console logs are captured by the process runner</li> <li>File logs are rotated daily with a 30-day retention:   <pre><code>from logging.handlers import TimedRotatingFileHandler\n\nhandler = TimedRotatingFileHandler(\n    \"logs/app.log\", \n    when=\"midnight\", \n    backupCount=30\n)\n</code></pre></li> </ul>"},{"location":"architecture/logging-strategy/#log-analysis","title":"Log Analysis","text":"<p>For local development, logs are displayed in a readable format in the console.</p> <p>For production, JSON-formatted logs can be: - Ingested into log aggregation systems (e.g., ELK stack, Datadog) - Parsed for metrics and alerting - Analyzed for debugging and performance tracking</p>"},{"location":"architecture/logging-strategy/#implementation","title":"Implementation","text":"<ol> <li>Include <code>structlog</code> and <code>rich</code> in the project dependencies</li> <li>Add the logging configuration to application startup</li> <li>Create a module-specific logger at the top of each file</li> <li>Use structured logging with explicit parameter names </li> </ol>"}]}